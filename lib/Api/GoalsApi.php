<?php
/**
 * GoalsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GoalsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GoalsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'usersUserGuidGoalsGet' => [
            'application/json',
        ],
        'usersUserGuidGoalsGoalGuidDelete' => [
            'application/json',
        ],
        'usersUserGuidGoalsGoalGuidGet' => [
            'application/json',
        ],
        'usersUserGuidGoalsGoalGuidPut' => [
            'application/json',
        ],
        'usersUserGuidGoalsPost' => [
            'application/json',
        ],
        'usersUserGuidGoalsRepositionPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usersUserGuidGoalsGet
     *
     * List goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  string|null $page Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)
     * @param  string|null $records_per_age The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GoalsResponseBody
     */
    public function usersUserGuidGoalsGet($user_guid, $page = null, $records_per_age = null, string $contentType = self::contentTypes['usersUserGuidGoalsGet'][0])
    {
        list($response) = $this->usersUserGuidGoalsGetWithHttpInfo($user_guid, $page, $records_per_age, $contentType);
        return $response;
    }

    /**
     * Operation usersUserGuidGoalsGetWithHttpInfo
     *
     * List goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  string|null $page Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)
     * @param  string|null $records_per_age The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GoalsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsGetWithHttpInfo($user_guid, $page = null, $records_per_age = null, string $contentType = self::contentTypes['usersUserGuidGoalsGet'][0])
    {
        $request = $this->usersUserGuidGoalsGetRequest($user_guid, $page, $records_per_age, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GoalsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GoalsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GoalsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsGetAsync
     *
     * List goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  string|null $page Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)
     * @param  string|null $records_per_age The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGetAsync($user_guid, $page = null, $records_per_age = null, string $contentType = self::contentTypes['usersUserGuidGoalsGet'][0])
    {
        return $this->usersUserGuidGoalsGetAsyncWithHttpInfo($user_guid, $page, $records_per_age, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsGetAsyncWithHttpInfo
     *
     * List goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  string|null $page Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)
     * @param  string|null $records_per_age The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGetAsyncWithHttpInfo($user_guid, $page = null, $records_per_age = null, string $contentType = self::contentTypes['usersUserGuidGoalsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GoalsResponseBody';
        $request = $this->usersUserGuidGoalsGetRequest($user_guid, $page, $records_per_age, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsGet'
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  string|null $page Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)
     * @param  string|null $records_per_age The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsGetRequest($user_guid, $page = null, $records_per_age = null, string $contentType = self::contentTypes['usersUserGuidGoalsGet'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsGet'
            );
        }




        $resourcePath = '/users/{user_guid}/goals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_age,
            'records_per_age', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidDelete
     *
     * Delete a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function usersUserGuidGoalsGoalGuidDelete($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidDelete'][0])
    {
        $this->usersUserGuidGoalsGoalGuidDeleteWithHttpInfo($goal_guid, $user_guid, $contentType);
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidDeleteWithHttpInfo
     *
     * Delete a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsGoalGuidDeleteWithHttpInfo($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidDelete'][0])
    {
        $request = $this->usersUserGuidGoalsGoalGuidDeleteRequest($goal_guid, $user_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidDeleteAsync
     *
     * Delete a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidDeleteAsync($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidDelete'][0])
    {
        return $this->usersUserGuidGoalsGoalGuidDeleteAsyncWithHttpInfo($goal_guid, $user_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidDeleteAsyncWithHttpInfo
     *
     * Delete a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidDeleteAsyncWithHttpInfo($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidDelete'][0])
    {
        $returnType = '';
        $request = $this->usersUserGuidGoalsGoalGuidDeleteRequest($goal_guid, $user_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsGoalGuidDelete'
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsGoalGuidDeleteRequest($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidDelete'][0])
    {

        // verify the required parameter 'goal_guid' is set
        if ($goal_guid === null || (is_array($goal_guid) && count($goal_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_guid when calling usersUserGuidGoalsGoalGuidDelete'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsGoalGuidDelete'
            );
        }


        $resourcePath = '/users/{user_guid}/goals/{goal_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($goal_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_guid' . '}',
                ObjectSerializer::toPathValue($goal_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidGet
     *
     * Read a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GoalResponseBody
     */
    public function usersUserGuidGoalsGoalGuidGet($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidGet'][0])
    {
        list($response) = $this->usersUserGuidGoalsGoalGuidGetWithHttpInfo($goal_guid, $user_guid, $contentType);
        return $response;
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidGetWithHttpInfo
     *
     * Read a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GoalResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsGoalGuidGetWithHttpInfo($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidGet'][0])
    {
        $request = $this->usersUserGuidGoalsGoalGuidGetRequest($goal_guid, $user_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GoalResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidGetAsync
     *
     * Read a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidGetAsync($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidGet'][0])
    {
        return $this->usersUserGuidGoalsGoalGuidGetAsyncWithHttpInfo($goal_guid, $user_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidGetAsyncWithHttpInfo
     *
     * Read a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidGetAsyncWithHttpInfo($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GoalResponseBody';
        $request = $this->usersUserGuidGoalsGoalGuidGetRequest($goal_guid, $user_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsGoalGuidGet'
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsGoalGuidGetRequest($goal_guid, $user_guid, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidGet'][0])
    {

        // verify the required parameter 'goal_guid' is set
        if ($goal_guid === null || (is_array($goal_guid) && count($goal_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_guid when calling usersUserGuidGoalsGoalGuidGet'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsGoalGuidGet'
            );
        }


        $resourcePath = '/users/{user_guid}/goals/{goal_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($goal_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_guid' . '}',
                ObjectSerializer::toPathValue($goal_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidPut
     *
     * Update a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  \OpenAPI\Client\Model\UpdateGoalRequestBody $update_goal_request_body update_goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GoalResponseBody
     */
    public function usersUserGuidGoalsGoalGuidPut($goal_guid, $user_guid, $update_goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidPut'][0])
    {
        list($response) = $this->usersUserGuidGoalsGoalGuidPutWithHttpInfo($goal_guid, $user_guid, $update_goal_request_body, $contentType);
        return $response;
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidPutWithHttpInfo
     *
     * Update a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  \OpenAPI\Client\Model\UpdateGoalRequestBody $update_goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GoalResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsGoalGuidPutWithHttpInfo($goal_guid, $user_guid, $update_goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidPut'][0])
    {
        $request = $this->usersUserGuidGoalsGoalGuidPutRequest($goal_guid, $user_guid, $update_goal_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GoalResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidPutAsync
     *
     * Update a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  \OpenAPI\Client\Model\UpdateGoalRequestBody $update_goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidPutAsync($goal_guid, $user_guid, $update_goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidPut'][0])
    {
        return $this->usersUserGuidGoalsGoalGuidPutAsyncWithHttpInfo($goal_guid, $user_guid, $update_goal_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsGoalGuidPutAsyncWithHttpInfo
     *
     * Update a goal
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  \OpenAPI\Client\Model\UpdateGoalRequestBody $update_goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsGoalGuidPutAsyncWithHttpInfo($goal_guid, $user_guid, $update_goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GoalResponseBody';
        $request = $this->usersUserGuidGoalsGoalGuidPutRequest($goal_guid, $user_guid, $update_goal_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsGoalGuidPut'
     *
     * @param  string $goal_guid The unique identifier for a goal. Defined by MX. (required)
     * @param  string $user_guid The unique identifier for a user. (required)
     * @param  \OpenAPI\Client\Model\UpdateGoalRequestBody $update_goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsGoalGuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsGoalGuidPutRequest($goal_guid, $user_guid, $update_goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsGoalGuidPut'][0])
    {

        // verify the required parameter 'goal_guid' is set
        if ($goal_guid === null || (is_array($goal_guid) && count($goal_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_guid when calling usersUserGuidGoalsGoalGuidPut'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsGoalGuidPut'
            );
        }

        // verify the required parameter 'update_goal_request_body' is set
        if ($update_goal_request_body === null || (is_array($update_goal_request_body) && count($update_goal_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_goal_request_body when calling usersUserGuidGoalsGoalGuidPut'
            );
        }


        $resourcePath = '/users/{user_guid}/goals/{goal_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($goal_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_guid' . '}',
                ObjectSerializer::toPathValue($goal_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_goal_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_goal_request_body));
            } else {
                $httpBody = $update_goal_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersUserGuidGoalsPost
     *
     * Create a goal
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\GoalRequestBody $goal_request_body goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GoalResponseBody
     */
    public function usersUserGuidGoalsPost($user_guid, $goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsPost'][0])
    {
        list($response) = $this->usersUserGuidGoalsPostWithHttpInfo($user_guid, $goal_request_body, $contentType);
        return $response;
    }

    /**
     * Operation usersUserGuidGoalsPostWithHttpInfo
     *
     * Create a goal
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\GoalRequestBody $goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GoalResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsPostWithHttpInfo($user_guid, $goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsPost'][0])
    {
        $request = $this->usersUserGuidGoalsPostRequest($user_guid, $goal_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GoalResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GoalResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsPostAsync
     *
     * Create a goal
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\GoalRequestBody $goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsPostAsync($user_guid, $goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsPost'][0])
    {
        return $this->usersUserGuidGoalsPostAsyncWithHttpInfo($user_guid, $goal_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsPostAsyncWithHttpInfo
     *
     * Create a goal
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\GoalRequestBody $goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsPostAsyncWithHttpInfo($user_guid, $goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GoalResponseBody';
        $request = $this->usersUserGuidGoalsPostRequest($user_guid, $goal_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsPost'
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\GoalRequestBody $goal_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsPostRequest($user_guid, $goal_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsPost'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsPost'
            );
        }

        // verify the required parameter 'goal_request_body' is set
        if ($goal_request_body === null || (is_array($goal_request_body) && count($goal_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_request_body when calling usersUserGuidGoalsPost'
            );
        }


        $resourcePath = '/users/{user_guid}/goals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($goal_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($goal_request_body));
            } else {
                $httpBody = $goal_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersUserGuidGoalsRepositionPut
     *
     * Reposition goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\RepositionRequestBody $reposition_request_body reposition_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsRepositionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RepositionResponseBody
     */
    public function usersUserGuidGoalsRepositionPut($user_guid, $reposition_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsRepositionPut'][0])
    {
        list($response) = $this->usersUserGuidGoalsRepositionPutWithHttpInfo($user_guid, $reposition_request_body, $contentType);
        return $response;
    }

    /**
     * Operation usersUserGuidGoalsRepositionPutWithHttpInfo
     *
     * Reposition goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\RepositionRequestBody $reposition_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsRepositionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RepositionResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserGuidGoalsRepositionPutWithHttpInfo($user_guid, $reposition_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsRepositionPut'][0])
    {
        $request = $this->usersUserGuidGoalsRepositionPutRequest($user_guid, $reposition_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RepositionResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RepositionResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RepositionResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usersUserGuidGoalsRepositionPutAsync
     *
     * Reposition goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\RepositionRequestBody $reposition_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsRepositionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsRepositionPutAsync($user_guid, $reposition_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsRepositionPut'][0])
    {
        return $this->usersUserGuidGoalsRepositionPutAsyncWithHttpInfo($user_guid, $reposition_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersUserGuidGoalsRepositionPutAsyncWithHttpInfo
     *
     * Reposition goals
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\RepositionRequestBody $reposition_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsRepositionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersUserGuidGoalsRepositionPutAsyncWithHttpInfo($user_guid, $reposition_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsRepositionPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RepositionResponseBody';
        $request = $this->usersUserGuidGoalsRepositionPutRequest($user_guid, $reposition_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersUserGuidGoalsRepositionPut'
     *
     * @param  string $user_guid The unique identifier for the user. (required)
     * @param  \OpenAPI\Client\Model\RepositionRequestBody $reposition_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersUserGuidGoalsRepositionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersUserGuidGoalsRepositionPutRequest($user_guid, $reposition_request_body, string $contentType = self::contentTypes['usersUserGuidGoalsRepositionPut'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling usersUserGuidGoalsRepositionPut'
            );
        }

        // verify the required parameter 'reposition_request_body' is set
        if ($reposition_request_body === null || (is_array($reposition_request_body) && count($reposition_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reposition_request_body when calling usersUserGuidGoalsRepositionPut'
            );
        }


        $resourcePath = '/users/{user_guid}/goals/reposition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reposition_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reposition_request_body));
            } else {
                $httpBody = $reposition_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
