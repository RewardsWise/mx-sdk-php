<?php
/**
 * MxPlatformApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MxPlatformApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WidgetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aggregateMember' => [
            'application/json',
        ],
        'checkBalances' => [
            'application/json',
        ],
        'createManagedAccount' => [
            'application/json',
        ],
        'createManagedMember' => [
            'application/json',
        ],
        'createManualAccount' => [
            'application/json',
        ],
        'createMember' => [
            'application/json',
        ],
        'createTag' => [
            'application/json',
        ],
        'createTagging' => [
            'application/json',
        ],
        'createUser' => [
            'application/json',
        ],
        'creditCard' => [
            'application/json',
        ],
        'deleteManagedAccount' => [
            'application/json',
        ],
        'deleteManagedMember' => [
            'application/json',
        ],
        'deleteManualAccount' => [
            'application/json',
        ],
        'deleteMember' => [
            'application/json',
        ],
        'deleteTag' => [
            'application/json',
        ],
        'deleteTagging' => [
            'application/json',
        ],
        'deleteUser' => [
            'application/json',
        ],
        'deprecatedRequestPaymentProcessorAuthorizationCode' => [
            'application/json',
        ],
        'downloadStatementPDF' => [
            'application/json',
        ],
        'downloadTaxDocument' => [
            'application/json',
        ],
        'extendHistory' => [
            'application/json',
        ],
        'fetchRewards' => [
            'application/json',
        ],
        'fetchStatements' => [
            'application/json',
        ],
        'fetchTaxDocuments' => [
            'application/json',
        ],
        'identifyMember' => [
            'application/json',
        ],
        'listAccountNumbersByAccount' => [
            'application/json',
        ],
        'listAccountNumbersByMember' => [
            'application/json',
        ],
        'listAccountOwnersByMember' => [
            'application/json',
        ],
        'listCategories' => [
            'application/json',
        ],
        'listDefaultCategories' => [
            'application/json',
        ],
        'listDefaultCategoriesByUser' => [
            'application/json',
        ],
        'listFavoriteInstitutions' => [
            'application/json',
        ],
        'listHoldings' => [
            'application/json',
        ],
        'listHoldingsByAccount' => [
            'application/json',
        ],
        'listHoldingsByMember' => [
            'application/json',
        ],
        'listInstitutionCredentials' => [
            'application/json',
        ],
        'listInstitutions' => [
            'application/json',
        ],
        'listManagedAccounts' => [
            'application/json',
        ],
        'listManagedInstitutions' => [
            'application/json',
        ],
        'listManagedMembers' => [
            'application/json',
        ],
        'listMemberAccounts' => [
            'application/json',
        ],
        'listMemberChallenges' => [
            'application/json',
        ],
        'listMemberCredentials' => [
            'application/json',
        ],
        'listMembers' => [
            'application/json',
        ],
        'listMerchants' => [
            'application/json',
        ],
        'listRewards' => [
            'application/json',
        ],
        'listStatementsByMember' => [
            'application/json',
        ],
        'listTaggings' => [
            'application/json',
        ],
        'listTags' => [
            'application/json',
        ],
        'listTaxDocuments' => [
            'application/json',
        ],
        'listUserAccounts' => [
            'application/json',
        ],
        'listUsers' => [
            'application/json',
        ],
        'readAccount' => [
            'application/json',
        ],
        'readAccountByMember' => [
            'application/json',
        ],
        'readHolding' => [
            'application/json',
        ],
        'readInstitution' => [
            'application/json',
        ],
        'readManagedAccount' => [
            'application/json',
        ],
        'readManagedMember' => [
            'application/json',
        ],
        'readMember' => [
            'application/json',
        ],
        'readMemberStatus' => [
            'application/json',
        ],
        'readMerchant' => [
            'application/json',
        ],
        'readMerchantLocation' => [
            'application/json',
        ],
        'readRewards' => [
            'application/json',
        ],
        'readStatementByMember' => [
            'application/json',
        ],
        'readTag' => [
            'application/json',
        ],
        'readTagging' => [
            'application/json',
        ],
        'readTaxDocument' => [
            'application/json',
        ],
        'readUser' => [
            'application/json',
        ],
        'requestAuthorizationCode' => [
            'application/json',
        ],
        'requestConnectWidgetURL' => [
            'application/json',
        ],
        'requestOAuthWindowURI' => [
            'application/json',
        ],
        'requestWidgetURL' => [
            'application/json',
        ],
        'resumeAggregation' => [
            'application/json',
        ],
        'updateAccountByMember' => [
            'application/json',
        ],
        'updateCategory' => [
            'application/json',
        ],
        'updateManagedAccount' => [
            'application/json',
        ],
        'updateManagedMember' => [
            'application/json',
        ],
        'updateMember' => [
            'application/json',
        ],
        'updateTag' => [
            'application/json',
        ],
        'updateTagging' => [
            'application/json',
        ],
        'updateUser' => [
            'application/json',
        ],
        'usersUserGuidMonthlyCashFlowProfileGet' => [
            'application/json',
        ],
        'usersUserGuidMonthlyCashFlowProfilePut' => [
            'application/json',
        ],
        'verifyMember' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation requestAuthorizationCode
     *
     * Request an authorization code.
     *
     * @param  \OpenAPI\Client\Model\AuthorizationCodeRequestBody $authorization_code_request_body The scope for the authorization code. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestAuthorizationCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthorizationCodeResponseBody
     */
    public function requestAuthorizationCode($authorization_code_request_body, string $contentType = self::contentTypes['requestAuthorizationCode'][0])
    {
        list($response) = $this->requestAuthorizationCodeWithHttpInfo($authorization_code_request_body, $contentType);
        return $response;
    }

    /**
     * Operation requestAuthorizationCodeWithHttpInfo
     *
     * Request an authorization code.
     *
     * @param  \OpenAPI\Client\Model\AuthorizationCodeRequestBody $authorization_code_request_body The scope for the authorization code. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestAuthorizationCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthorizationCodeResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestAuthorizationCodeWithHttpInfo($authorization_code_request_body, string $contentType = self::contentTypes['requestAuthorizationCode'][0])
    {
        $request = $this->requestAuthorizationCodeRequest($authorization_code_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AuthorizationCodeResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AuthorizationCodeResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthorizationCodeResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation requestAuthorizationCodeAsync
     *
     * Request an authorization code.
     *
     * @param  \OpenAPI\Client\Model\AuthorizationCodeRequestBody $authorization_code_request_body The scope for the authorization code. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestAuthorizationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAuthorizationCodeAsync($authorization_code_request_body, string $contentType = self::contentTypes['requestAuthorizationCode'][0])
    {
        return $this->requestAuthorizationCodeAsyncWithHttpInfo($authorization_code_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestAuthorizationCodeAsyncWithHttpInfo
     *
     * Request an authorization code.
     *
     * @param  \OpenAPI\Client\Model\AuthorizationCodeRequestBody $authorization_code_request_body The scope for the authorization code. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestAuthorizationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAuthorizationCodeAsyncWithHttpInfo($authorization_code_request_body, string $contentType = self::contentTypes['requestAuthorizationCode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuthorizationCodeResponseBody';
        $request = $this->requestAuthorizationCodeRequest($authorization_code_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestAuthorizationCode'
     *
     * @param  \OpenAPI\Client\Model\AuthorizationCodeRequestBody $authorization_code_request_body The scope for the authorization code. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestAuthorizationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestAuthorizationCodeRequest($authorization_code_request_body, string $contentType = self::contentTypes['requestAuthorizationCode'][0])
    {

        // verify the required parameter 'authorization_code_request_body' is set
        if ($authorization_code_request_body === null || (is_array($authorization_code_request_body) && count($authorization_code_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_code_request_body when calling requestAuthorizationCode'
            );
        }


        $resourcePath = '/authorization_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($authorization_code_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($authorization_code_request_body));
            } else {
                $httpBody = $authorization_code_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestConnectWidgetURL
     *
     * Request connect widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\ConnectWidgetRequestBody $connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestConnectWidgetURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ConnectWidgetResponseBody
     */
    public function requestConnectWidgetURL($user_guid, $connect_widget_request_body, string $contentType = self::contentTypes['requestConnectWidgetURL'][0])
    {
        list($response) = $this->requestConnectWidgetURLWithHttpInfo($user_guid, $connect_widget_request_body, $contentType);
        return $response;
    }

    /**
     * Operation requestConnectWidgetURLWithHttpInfo
     *
     * Request connect widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\ConnectWidgetRequestBody $connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestConnectWidgetURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ConnectWidgetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestConnectWidgetURLWithHttpInfo($user_guid, $connect_widget_request_body, string $contentType = self::contentTypes['requestConnectWidgetURL'][0])
    {
        $request = $this->requestConnectWidgetURLRequest($user_guid, $connect_widget_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ConnectWidgetResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ConnectWidgetResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConnectWidgetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation requestConnectWidgetURLAsync
     *
     * Request connect widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\ConnectWidgetRequestBody $connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestConnectWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestConnectWidgetURLAsync($user_guid, $connect_widget_request_body, string $contentType = self::contentTypes['requestConnectWidgetURL'][0])
    {
        return $this->requestConnectWidgetURLAsyncWithHttpInfo($user_guid, $connect_widget_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestConnectWidgetURLAsyncWithHttpInfo
     *
     * Request connect widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\ConnectWidgetRequestBody $connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestConnectWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestConnectWidgetURLAsyncWithHttpInfo($user_guid, $connect_widget_request_body, string $contentType = self::contentTypes['requestConnectWidgetURL'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ConnectWidgetResponseBody';
        $request = $this->requestConnectWidgetURLRequest($user_guid, $connect_widget_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestConnectWidgetURL'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\ConnectWidgetRequestBody $connect_widget_request_body Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestConnectWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestConnectWidgetURLRequest($user_guid, $connect_widget_request_body, string $contentType = self::contentTypes['requestConnectWidgetURL'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling requestConnectWidgetURL'
            );
        }

        // verify the required parameter 'connect_widget_request_body' is set
        if ($connect_widget_request_body === null || (is_array($connect_widget_request_body) && count($connect_widget_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connect_widget_request_body when calling requestConnectWidgetURL'
            );
        }


        $resourcePath = '/users/{user_guid}/connect_widget_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($connect_widget_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($connect_widget_request_body));
            } else {
                $httpBody = $connect_widget_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestOAuthWindowURI
     *
     * Request oauth window uri
     *
     * @param  string $member_guid The unique id for a &#x60;member&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string|null $client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string|null $enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)
     * @param  string|null $referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)
     * @param  bool|null $skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)
     * @param  string|null $ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestOAuthWindowURI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OAuthWindowResponseBody
     */
    public function requestOAuthWindowURI($member_guid, $user_guid, $client_redirect_url = null, $enable_app2app = null, $referral_source = null, $skip_aggregation = null, $ui_message_webview_url_scheme = null, string $contentType = self::contentTypes['requestOAuthWindowURI'][0])
    {
        list($response) = $this->requestOAuthWindowURIWithHttpInfo($member_guid, $user_guid, $client_redirect_url, $enable_app2app, $referral_source, $skip_aggregation, $ui_message_webview_url_scheme, $contentType);
        return $response;
    }

    /**
     * Operation requestOAuthWindowURIWithHttpInfo
     *
     * Request oauth window uri
     *
     * @param  string $member_guid The unique id for a &#x60;member&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string|null $client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string|null $enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)
     * @param  string|null $referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)
     * @param  bool|null $skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)
     * @param  string|null $ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestOAuthWindowURI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OAuthWindowResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestOAuthWindowURIWithHttpInfo($member_guid, $user_guid, $client_redirect_url = null, $enable_app2app = null, $referral_source = null, $skip_aggregation = null, $ui_message_webview_url_scheme = null, string $contentType = self::contentTypes['requestOAuthWindowURI'][0])
    {
        $request = $this->requestOAuthWindowURIRequest($member_guid, $user_guid, $client_redirect_url, $enable_app2app, $referral_source, $skip_aggregation, $ui_message_webview_url_scheme, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\OAuthWindowResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\OAuthWindowResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OAuthWindowResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation requestOAuthWindowURIAsync
     *
     * Request oauth window uri
     *
     * @param  string $member_guid The unique id for a &#x60;member&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string|null $client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string|null $enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)
     * @param  string|null $referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)
     * @param  bool|null $skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)
     * @param  string|null $ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestOAuthWindowURI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestOAuthWindowURIAsync($member_guid, $user_guid, $client_redirect_url = null, $enable_app2app = null, $referral_source = null, $skip_aggregation = null, $ui_message_webview_url_scheme = null, string $contentType = self::contentTypes['requestOAuthWindowURI'][0])
    {
        return $this->requestOAuthWindowURIAsyncWithHttpInfo($member_guid, $user_guid, $client_redirect_url, $enable_app2app, $referral_source, $skip_aggregation, $ui_message_webview_url_scheme, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestOAuthWindowURIAsyncWithHttpInfo
     *
     * Request oauth window uri
     *
     * @param  string $member_guid The unique id for a &#x60;member&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string|null $client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string|null $enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)
     * @param  string|null $referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)
     * @param  bool|null $skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)
     * @param  string|null $ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestOAuthWindowURI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestOAuthWindowURIAsyncWithHttpInfo($member_guid, $user_guid, $client_redirect_url = null, $enable_app2app = null, $referral_source = null, $skip_aggregation = null, $ui_message_webview_url_scheme = null, string $contentType = self::contentTypes['requestOAuthWindowURI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OAuthWindowResponseBody';
        $request = $this->requestOAuthWindowURIRequest($member_guid, $user_guid, $client_redirect_url, $enable_app2app, $referral_source, $skip_aggregation, $ui_message_webview_url_scheme, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestOAuthWindowURI'
     *
     * @param  string $member_guid The unique id for a &#x60;member&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string|null $client_redirect_url A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string|null $enable_app2app This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)
     * @param  string|null $referral_source Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)
     * @param  bool|null $skip_aggregation Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)
     * @param  string|null $ui_message_webview_url_scheme A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestOAuthWindowURI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestOAuthWindowURIRequest($member_guid, $user_guid, $client_redirect_url = null, $enable_app2app = null, $referral_source = null, $skip_aggregation = null, $ui_message_webview_url_scheme = null, string $contentType = self::contentTypes['requestOAuthWindowURI'][0])
    {

        // verify the required parameter 'member_guid' is set
        if ($member_guid === null || (is_array($member_guid) && count($member_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_guid when calling requestOAuthWindowURI'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling requestOAuthWindowURI'
            );
        }







        $resourcePath = '/users/{user_guid}/members/{member_guid}/oauth_window_uri';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_redirect_url,
            'client_redirect_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_app2app,
            'enable_app2app', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referral_source,
            'referral_source', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_aggregation,
            'skip_aggregation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ui_message_webview_url_scheme,
            'ui_message_webview_url_scheme', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($member_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'member_guid' . '}',
                ObjectSerializer::toPathValue($member_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestWidgetURL
     *
     * Request widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\WidgetRequestBody $widget_request_body The widget url configuration options. (required)
     * @param  string|null $accept_language The desired language of the widget. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestWidgetURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WidgetResponseBody
     */
    public function requestWidgetURL($user_guid, $widget_request_body, $accept_language = null, string $contentType = self::contentTypes['requestWidgetURL'][0])
    {
        list($response) = $this->requestWidgetURLWithHttpInfo($user_guid, $widget_request_body, $accept_language, $contentType);
        return $response;
    }

    /**
     * Operation requestWidgetURLWithHttpInfo
     *
     * Request widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\WidgetRequestBody $widget_request_body The widget url configuration options. (required)
     * @param  string|null $accept_language The desired language of the widget. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestWidgetURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WidgetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestWidgetURLWithHttpInfo($user_guid, $widget_request_body, $accept_language = null, string $contentType = self::contentTypes['requestWidgetURL'][0])
    {
        $request = $this->requestWidgetURLRequest($user_guid, $widget_request_body, $accept_language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WidgetResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WidgetResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WidgetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation requestWidgetURLAsync
     *
     * Request widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\WidgetRequestBody $widget_request_body The widget url configuration options. (required)
     * @param  string|null $accept_language The desired language of the widget. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestWidgetURLAsync($user_guid, $widget_request_body, $accept_language = null, string $contentType = self::contentTypes['requestWidgetURL'][0])
    {
        return $this->requestWidgetURLAsyncWithHttpInfo($user_guid, $widget_request_body, $accept_language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestWidgetURLAsyncWithHttpInfo
     *
     * Request widget url
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\WidgetRequestBody $widget_request_body The widget url configuration options. (required)
     * @param  string|null $accept_language The desired language of the widget. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestWidgetURLAsyncWithHttpInfo($user_guid, $widget_request_body, $accept_language = null, string $contentType = self::contentTypes['requestWidgetURL'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WidgetResponseBody';
        $request = $this->requestWidgetURLRequest($user_guid, $widget_request_body, $accept_language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestWidgetURL'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\WidgetRequestBody $widget_request_body The widget url configuration options. (required)
     * @param  string|null $accept_language The desired language of the widget. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestWidgetURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestWidgetURLRequest($user_guid, $widget_request_body, $accept_language = null, string $contentType = self::contentTypes['requestWidgetURL'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling requestWidgetURL'
            );
        }

        // verify the required parameter 'widget_request_body' is set
        if ($widget_request_body === null || (is_array($widget_request_body) && count($widget_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $widget_request_body when calling requestWidgetURL'
            );
        }



        $resourcePath = '/users/{user_guid}/widget_urls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($widget_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($widget_request_body));
            } else {
                $httpBody = $widget_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
