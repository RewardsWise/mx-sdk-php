<?php
/**
 * SpendingPlanApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SpendingPlanApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SpendingPlanApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSpendingPlan' => [
            'application/json',
        ],
        'createSpendingPlanIterationItem' => [
            'application/json',
        ],
        'deleteSpendingPlan' => [
            'application/json',
        ],
        'deleteSpendingPlanAccount' => [
            'application/json',
        ],
        'deleteSpendingPlanIterationItem' => [
            'application/json',
        ],
        'listSpendingPlanAccounts' => [
            'application/json',
        ],
        'listSpendingPlanIterationItems' => [
            'application/json',
        ],
        'listSpendingPlanIterations' => [
            'application/json',
        ],
        'listSpendingPlans' => [
            'application/json',
        ],
        'readSpendingPlanAccount' => [
            'application/json',
        ],
        'readSpendingPlanIteration' => [
            'application/json',
        ],
        'readSpendingPlanIterationItem' => [
            'application/json',
        ],
        'readSpendingPlanUser' => [
            'application/json',
        ],
        'updateSpendingPlanIterationItem' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSpendingPlan
     *
     * Create spending plan
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanResponse
     */
    public function createSpendingPlan($user_guid, string $contentType = self::contentTypes['createSpendingPlan'][0])
    {
        list($response) = $this->createSpendingPlanWithHttpInfo($user_guid, $contentType);
        return $response;
    }

    /**
     * Operation createSpendingPlanWithHttpInfo
     *
     * Create spending plan
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpendingPlanWithHttpInfo($user_guid, string $contentType = self::contentTypes['createSpendingPlan'][0])
    {
        $request = $this->createSpendingPlanRequest($user_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSpendingPlanAsync
     *
     * Create spending plan
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpendingPlanAsync($user_guid, string $contentType = self::contentTypes['createSpendingPlan'][0])
    {
        return $this->createSpendingPlanAsyncWithHttpInfo($user_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSpendingPlanAsyncWithHttpInfo
     *
     * Create spending plan
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpendingPlanAsyncWithHttpInfo($user_guid, string $contentType = self::contentTypes['createSpendingPlan'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanResponse';
        $request = $this->createSpendingPlanRequest($user_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpendingPlan'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpendingPlanRequest($user_guid, string $contentType = self::contentTypes['createSpendingPlan'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling createSpendingPlan'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpendingPlanIterationItem
     *
     * Create spending plan iteration item
     *
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be created with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationItemResponse
     */
    public function createSpendingPlanIterationItem($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['createSpendingPlanIterationItem'][0])
    {
        list($response) = $this->createSpendingPlanIterationItemWithHttpInfo($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation createSpendingPlanIterationItemWithHttpInfo
     *
     * Create spending plan iteration item
     *
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be created with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpendingPlanIterationItemWithHttpInfo($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['createSpendingPlanIterationItem'][0])
    {
        $request = $this->createSpendingPlanIterationItemRequest($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSpendingPlanIterationItemAsync
     *
     * Create spending plan iteration item
     *
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be created with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpendingPlanIterationItemAsync($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['createSpendingPlanIterationItem'][0])
    {
        return $this->createSpendingPlanIterationItemAsyncWithHttpInfo($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSpendingPlanIterationItemAsyncWithHttpInfo
     *
     * Create spending plan iteration item
     *
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be created with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpendingPlanIterationItemAsyncWithHttpInfo($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['createSpendingPlanIterationItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse';
        $request = $this->createSpendingPlanIterationItemRequest($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpendingPlanIterationItem'
     *
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be created with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpendingPlanIterationItemRequest($spending_plan_guid, $user_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['createSpendingPlanIterationItem'][0])
    {

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling createSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling createSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'spending_plan_iteration_item_create_request_body' is set
        if ($spending_plan_iteration_item_create_request_body === null || (is_array($spending_plan_iteration_item_create_request_body) && count($spending_plan_iteration_item_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_iteration_item_create_request_body when calling createSpendingPlanIterationItem'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($spending_plan_iteration_item_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($spending_plan_iteration_item_create_request_body));
            } else {
                $httpBody = $spending_plan_iteration_item_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpendingPlan
     *
     * Delete spending plan
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSpendingPlan($user_guid, $spending_plan_guid, string $contentType = self::contentTypes['deleteSpendingPlan'][0])
    {
        $this->deleteSpendingPlanWithHttpInfo($user_guid, $spending_plan_guid, $contentType);
    }

    /**
     * Operation deleteSpendingPlanWithHttpInfo
     *
     * Delete spending plan
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpendingPlanWithHttpInfo($user_guid, $spending_plan_guid, string $contentType = self::contentTypes['deleteSpendingPlan'][0])
    {
        $request = $this->deleteSpendingPlanRequest($user_guid, $spending_plan_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSpendingPlanAsync
     *
     * Delete spending plan
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanAsync($user_guid, $spending_plan_guid, string $contentType = self::contentTypes['deleteSpendingPlan'][0])
    {
        return $this->deleteSpendingPlanAsyncWithHttpInfo($user_guid, $spending_plan_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpendingPlanAsyncWithHttpInfo
     *
     * Delete spending plan
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanAsyncWithHttpInfo($user_guid, $spending_plan_guid, string $contentType = self::contentTypes['deleteSpendingPlan'][0])
    {
        $returnType = '';
        $request = $this->deleteSpendingPlanRequest($user_guid, $spending_plan_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpendingPlan'
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpendingPlanRequest($user_guid, $spending_plan_guid, string $contentType = self::contentTypes['deleteSpendingPlan'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling deleteSpendingPlan'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling deleteSpendingPlan'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpendingPlanAccount
     *
     * Delete spending plan account
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSpendingPlanAccount($user_guid, $spending_plan_guid, $spending_plan_account_guid, string $contentType = self::contentTypes['deleteSpendingPlanAccount'][0])
    {
        $this->deleteSpendingPlanAccountWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $contentType);
    }

    /**
     * Operation deleteSpendingPlanAccountWithHttpInfo
     *
     * Delete spending plan account
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpendingPlanAccountWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, string $contentType = self::contentTypes['deleteSpendingPlanAccount'][0])
    {
        $request = $this->deleteSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSpendingPlanAccountAsync
     *
     * Delete spending plan account
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanAccountAsync($user_guid, $spending_plan_guid, $spending_plan_account_guid, string $contentType = self::contentTypes['deleteSpendingPlanAccount'][0])
    {
        return $this->deleteSpendingPlanAccountAsyncWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpendingPlanAccountAsyncWithHttpInfo
     *
     * Delete spending plan account
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanAccountAsyncWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, string $contentType = self::contentTypes['deleteSpendingPlanAccount'][0])
    {
        $returnType = '';
        $request = $this->deleteSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpendingPlanAccount'
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, string $contentType = self::contentTypes['deleteSpendingPlanAccount'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling deleteSpendingPlanAccount'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling deleteSpendingPlanAccount'
            );
        }

        // verify the required parameter 'spending_plan_account_guid' is set
        if ($spending_plan_account_guid === null || (is_array($spending_plan_account_guid) && count($spending_plan_account_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_account_guid when calling deleteSpendingPlanAccount'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_account_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_account_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_account_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpendingPlanIterationItem
     *
     * Delete spending plan iteration item
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSpendingPlanIterationItem($user_guid, $spending_plan_guid, $iteration_item_guid, string $contentType = self::contentTypes['deleteSpendingPlanIterationItem'][0])
    {
        $this->deleteSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $contentType);
    }

    /**
     * Operation deleteSpendingPlanIterationItemWithHttpInfo
     *
     * Delete spending plan iteration item
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, string $contentType = self::contentTypes['deleteSpendingPlanIterationItem'][0])
    {
        $request = $this->deleteSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSpendingPlanIterationItemAsync
     *
     * Delete spending plan iteration item
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanIterationItemAsync($user_guid, $spending_plan_guid, $iteration_item_guid, string $contentType = self::contentTypes['deleteSpendingPlanIterationItem'][0])
    {
        return $this->deleteSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpendingPlanIterationItemAsyncWithHttpInfo
     *
     * Delete spending plan iteration item
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, string $contentType = self::contentTypes['deleteSpendingPlanIterationItem'][0])
    {
        $returnType = '';
        $request = $this->deleteSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpendingPlanIterationItem'
     *
     * @param  string $user_guid The unique ID for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, string $contentType = self::contentTypes['deleteSpendingPlanIterationItem'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling deleteSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling deleteSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'iteration_item_guid' is set
        if ($iteration_item_guid === null || (is_array($iteration_item_guid) && count($iteration_item_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iteration_item_guid when calling deleteSpendingPlanIterationItem'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($iteration_item_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'iteration_item_guid' . '}',
                ObjectSerializer::toPathValue($iteration_item_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSpendingPlanAccounts
     *
     * List spending plan accounts
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanAccountsResponse
     */
    public function listSpendingPlanAccounts($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanAccounts'][0])
    {
        list($response) = $this->listSpendingPlanAccountsWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listSpendingPlanAccountsWithHttpInfo
     *
     * List spending plan accounts
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanAccountsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSpendingPlanAccountsWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanAccounts'][0])
    {
        $request = $this->listSpendingPlanAccountsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanAccountsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanAccountsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSpendingPlanAccountsAsync
     *
     * List spending plan accounts
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanAccountsAsync($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanAccounts'][0])
    {
        return $this->listSpendingPlanAccountsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSpendingPlanAccountsAsyncWithHttpInfo
     *
     * List spending plan accounts
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanAccountsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanAccounts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanAccountsResponse';
        $request = $this->listSpendingPlanAccountsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSpendingPlanAccounts'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSpendingPlanAccountsRequest($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanAccounts'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listSpendingPlanAccounts'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling listSpendingPlanAccounts'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSpendingPlanIterationItems
     *
     * List spending plan iteration items
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterationItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody
     */
    public function listSpendingPlanIterationItems($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterationItems'][0])
    {
        list($response) = $this->listSpendingPlanIterationItemsWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listSpendingPlanIterationItemsWithHttpInfo
     *
     * List spending plan iteration items
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterationItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSpendingPlanIterationItemsWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterationItems'][0])
    {
        $request = $this->listSpendingPlanIterationItemsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSpendingPlanIterationItemsAsync
     *
     * List spending plan iteration items
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterationItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanIterationItemsAsync($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterationItems'][0])
    {
        return $this->listSpendingPlanIterationItemsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSpendingPlanIterationItemsAsyncWithHttpInfo
     *
     * List spending plan iteration items
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterationItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanIterationItemsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterationItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationItemsResponseBody';
        $request = $this->listSpendingPlanIterationItemsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSpendingPlanIterationItems'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterationItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSpendingPlanIterationItemsRequest($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterationItems'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listSpendingPlanIterationItems'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling listSpendingPlanIterationItems'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSpendingPlanIterations
     *
     * List spending plan iterations
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationsResponse
     */
    public function listSpendingPlanIterations($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterations'][0])
    {
        list($response) = $this->listSpendingPlanIterationsWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listSpendingPlanIterationsWithHttpInfo
     *
     * List spending plan iterations
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSpendingPlanIterationsWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterations'][0])
    {
        $request = $this->listSpendingPlanIterationsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSpendingPlanIterationsAsync
     *
     * List spending plan iterations
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanIterationsAsync($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterations'][0])
    {
        return $this->listSpendingPlanIterationsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSpendingPlanIterationsAsyncWithHttpInfo
     *
     * List spending plan iterations
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlanIterationsAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationsResponse';
        $request = $this->listSpendingPlanIterationsRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSpendingPlanIterations'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlanIterations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSpendingPlanIterationsRequest($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlanIterations'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listSpendingPlanIterations'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling listSpendingPlanIterations'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSpendingPlans
     *
     * List spending plans
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlans'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlansResponseBody
     */
    public function listSpendingPlans($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlans'][0])
    {
        list($response) = $this->listSpendingPlansWithHttpInfo($user_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listSpendingPlansWithHttpInfo
     *
     * List spending plans
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlans'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlansResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSpendingPlansWithHttpInfo($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlans'][0])
    {
        $request = $this->listSpendingPlansRequest($user_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlansResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlansResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlansResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSpendingPlansAsync
     *
     * List spending plans
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlansAsync($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlans'][0])
    {
        return $this->listSpendingPlansAsyncWithHttpInfo($user_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSpendingPlansAsyncWithHttpInfo
     *
     * List spending plans
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSpendingPlansAsyncWithHttpInfo($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlans'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlansResponseBody';
        $request = $this->listSpendingPlansRequest($user_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSpendingPlans'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSpendingPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSpendingPlansRequest($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listSpendingPlans'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listSpendingPlans'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readSpendingPlanAccount
     *
     * Read spending plan account
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanAccountResponse
     */
    public function readSpendingPlanAccount($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanAccount'][0])
    {
        list($response) = $this->readSpendingPlanAccountWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation readSpendingPlanAccountWithHttpInfo
     *
     * Read spending plan account
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readSpendingPlanAccountWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanAccount'][0])
    {
        $request = $this->readSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanAccountResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation readSpendingPlanAccountAsync
     *
     * Read spending plan account
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanAccountAsync($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanAccount'][0])
    {
        return $this->readSpendingPlanAccountAsyncWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readSpendingPlanAccountAsyncWithHttpInfo
     *
     * Read spending plan account
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanAccountAsyncWithHttpInfo($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanAccountResponse';
        $request = $this->readSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readSpendingPlanAccount'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $spending_plan_account_guid The unique ID for the specified account. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readSpendingPlanAccountRequest($user_guid, $spending_plan_guid, $spending_plan_account_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanAccount'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling readSpendingPlanAccount'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling readSpendingPlanAccount'
            );
        }

        // verify the required parameter 'spending_plan_account_guid' is set
        if ($spending_plan_account_guid === null || (is_array($spending_plan_account_guid) && count($spending_plan_account_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_account_guid when calling readSpendingPlanAccount'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_account_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_account_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_account_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readSpendingPlanIteration
     *
     * Read a spending plan iteration
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int $iteration_number The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIteration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationResponse
     */
    public function readSpendingPlanIteration($user_guid, $spending_plan_guid, $iteration_number, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIteration'][0])
    {
        list($response) = $this->readSpendingPlanIterationWithHttpInfo($user_guid, $spending_plan_guid, $iteration_number, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation readSpendingPlanIterationWithHttpInfo
     *
     * Read a spending plan iteration
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int $iteration_number The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIteration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readSpendingPlanIterationWithHttpInfo($user_guid, $spending_plan_guid, $iteration_number, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIteration'][0])
    {
        $request = $this->readSpendingPlanIterationRequest($user_guid, $spending_plan_guid, $iteration_number, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation readSpendingPlanIterationAsync
     *
     * Read a spending plan iteration
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int $iteration_number The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIteration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanIterationAsync($user_guid, $spending_plan_guid, $iteration_number, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIteration'][0])
    {
        return $this->readSpendingPlanIterationAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_number, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readSpendingPlanIterationAsyncWithHttpInfo
     *
     * Read a spending plan iteration
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int $iteration_number The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIteration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanIterationAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_number, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIteration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationResponse';
        $request = $this->readSpendingPlanIterationRequest($user_guid, $spending_plan_guid, $iteration_number, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readSpendingPlanIteration'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int $iteration_number The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIteration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readSpendingPlanIterationRequest($user_guid, $spending_plan_guid, $iteration_number, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIteration'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling readSpendingPlanIteration'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling readSpendingPlanIteration'
            );
        }

        // verify the required parameter 'iteration_number' is set
        if ($iteration_number === null || (is_array($iteration_number) && count($iteration_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iteration_number when calling readSpendingPlanIteration'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/{iteration_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($iteration_number !== null) {
            $resourcePath = str_replace(
                '{' . 'iteration_number' . '}',
                ObjectSerializer::toPathValue($iteration_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readSpendingPlanIterationItem
     *
     * Read a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationItemResponse
     */
    public function readSpendingPlanIterationItem($user_guid, $spending_plan_guid, $iteration_item_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIterationItem'][0])
    {
        list($response) = $this->readSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation readSpendingPlanIterationItemWithHttpInfo
     *
     * Read a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIterationItem'][0])
    {
        $request = $this->readSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation readSpendingPlanIterationItemAsync
     *
     * Read a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanIterationItemAsync($user_guid, $spending_plan_guid, $iteration_item_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIterationItem'][0])
    {
        return $this->readSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readSpendingPlanIterationItemAsyncWithHttpInfo
     *
     * Read a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIterationItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse';
        $request = $this->readSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readSpendingPlanIterationItem'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanIterationItem'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling readSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling readSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'iteration_item_guid' is set
        if ($iteration_item_guid === null || (is_array($iteration_item_guid) && count($iteration_item_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iteration_item_guid when calling readSpendingPlanIterationItem'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($iteration_item_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'iteration_item_guid' . '}',
                ObjectSerializer::toPathValue($iteration_item_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readSpendingPlanUser
     *
     * Read a spending plan for a user
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanResponse
     */
    public function readSpendingPlanUser($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanUser'][0])
    {
        list($response) = $this->readSpendingPlanUserWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation readSpendingPlanUserWithHttpInfo
     *
     * Read a spending plan for a user
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readSpendingPlanUserWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanUser'][0])
    {
        $request = $this->readSpendingPlanUserRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation readSpendingPlanUserAsync
     *
     * Read a spending plan for a user
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanUserAsync($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanUser'][0])
    {
        return $this->readSpendingPlanUserAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readSpendingPlanUserAsyncWithHttpInfo
     *
     * Read a spending plan for a user
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readSpendingPlanUserAsyncWithHttpInfo($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanResponse';
        $request = $this->readSpendingPlanUserRequest($user_guid, $spending_plan_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readSpendingPlanUser'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readSpendingPlanUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readSpendingPlanUserRequest($user_guid, $spending_plan_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['readSpendingPlanUser'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling readSpendingPlanUser'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling readSpendingPlanUser'
            );
        }




        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpendingPlanIterationItem
     *
     * Update a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be updated with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SpendingPlanIterationItemResponse
     */
    public function updateSpendingPlanIterationItem($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['updateSpendingPlanIterationItem'][0])
    {
        list($response) = $this->updateSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation updateSpendingPlanIterationItemWithHttpInfo
     *
     * Update a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be updated with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SpendingPlanIterationItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSpendingPlanIterationItemWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['updateSpendingPlanIterationItem'][0])
    {
        $request = $this->updateSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSpendingPlanIterationItemAsync
     *
     * Update a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be updated with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpendingPlanIterationItemAsync($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['updateSpendingPlanIterationItem'][0])
    {
        return $this->updateSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSpendingPlanIterationItemAsyncWithHttpInfo
     *
     * Update a spending plan iteration item
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be updated with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpendingPlanIterationItemAsyncWithHttpInfo($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['updateSpendingPlanIterationItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SpendingPlanIterationItemResponse';
        $request = $this->updateSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpendingPlanIterationItem'
     *
     * @param  string $user_guid The unique id for a &#x60;user&#x60;. (required)
     * @param  string $spending_plan_guid The unique ID for the &#x60;spending_plan&#x60;. (required)
     * @param  string $iteration_item_guid The unique ID for the &#x60;iteration_item&#x60;. (required)
     * @param  \OpenAPI\Client\Model\SpendingPlanIterationItemCreateRequestBody $spending_plan_iteration_item_create_request_body Iteration item to be updated with required parameter (planned_amount) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpendingPlanIterationItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSpendingPlanIterationItemRequest($user_guid, $spending_plan_guid, $iteration_item_guid, $spending_plan_iteration_item_create_request_body, string $contentType = self::contentTypes['updateSpendingPlanIterationItem'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling updateSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'spending_plan_guid' is set
        if ($spending_plan_guid === null || (is_array($spending_plan_guid) && count($spending_plan_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_guid when calling updateSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'iteration_item_guid' is set
        if ($iteration_item_guid === null || (is_array($iteration_item_guid) && count($iteration_item_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iteration_item_guid when calling updateSpendingPlanIterationItem'
            );
        }

        // verify the required parameter 'spending_plan_iteration_item_create_request_body' is set
        if ($spending_plan_iteration_item_create_request_body === null || (is_array($spending_plan_iteration_item_create_request_body) && count($spending_plan_iteration_item_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spending_plan_iteration_item_create_request_body when calling updateSpendingPlanIterationItem'
            );
        }


        $resourcePath = '/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($spending_plan_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'spending_plan_guid' . '}',
                ObjectSerializer::toPathValue($spending_plan_guid),
                $resourcePath
            );
        }
        // path params
        if ($iteration_item_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'iteration_item_guid' . '}',
                ObjectSerializer::toPathValue($iteration_item_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($spending_plan_iteration_item_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($spending_plan_iteration_item_create_request_body));
            } else {
                $httpBody = $spending_plan_iteration_item_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
