<?php
/**
 * InsightsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InsightsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InsightsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'listAccountsInsight' => [
            'application/json',
        ],
        'listCategoriesInsight' => [
            'application/json',
        ],
        'listInsightsByAccount' => [
            'application/json',
        ],
        'listInsightsUser' => [
            'application/json',
        ],
        'listMerchantsInsight' => [
            'application/json',
        ],
        'listScheduledPaymentsInsight' => [
            'application/json',
        ],
        'listTransactionsInsight' => [
            'application/json',
        ],
        'readInsightsUser' => [
            'application/json',
        ],
        'updateInsight' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listAccountsInsight
     *
     * List all accounts associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountsResponseBody
     */
    public function listAccountsInsight($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listAccountsInsight'][0])
    {
        list($response) = $this->listAccountsInsightWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listAccountsInsightWithHttpInfo
     *
     * List all accounts associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAccountsInsightWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listAccountsInsight'][0])
    {
        $request = $this->listAccountsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AccountsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AccountsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listAccountsInsightAsync
     *
     * List all accounts associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountsInsightAsync($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listAccountsInsight'][0])
    {
        return $this->listAccountsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAccountsInsightAsyncWithHttpInfo
     *
     * List all accounts associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listAccountsInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountsResponseBody';
        $request = $this->listAccountsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAccountsInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAccountsInsightRequest($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listAccountsInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listAccountsInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling listAccountsInsight'
            );
        }




        $resourcePath = '/users/{user_guid}/insights/{insight_guid}/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCategoriesInsight
     *
     * List all categories associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCategoriesInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoriesResponseBody
     */
    public function listCategoriesInsight($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listCategoriesInsight'][0])
    {
        list($response) = $this->listCategoriesInsightWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listCategoriesInsightWithHttpInfo
     *
     * List all categories associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCategoriesInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoriesResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCategoriesInsightWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listCategoriesInsight'][0])
    {
        $request = $this->listCategoriesInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CategoriesResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CategoriesResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoriesResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listCategoriesInsightAsync
     *
     * List all categories associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCategoriesInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCategoriesInsightAsync($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listCategoriesInsight'][0])
    {
        return $this->listCategoriesInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCategoriesInsightAsyncWithHttpInfo
     *
     * List all categories associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCategoriesInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCategoriesInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listCategoriesInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoriesResponseBody';
        $request = $this->listCategoriesInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCategoriesInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCategoriesInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCategoriesInsightRequest($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listCategoriesInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listCategoriesInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling listCategoriesInsight'
            );
        }




        $resourcePath = '/users/{user_guid}/insights/{insight_guid}/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInsightsByAccount
     *
     * List insights by account
     *
     * @param  string $account_guid The unique id for the &#x60;account&#x60;. (required)
     * @param  string $user_guid The unique id for the &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsByAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InsightsResponseBody
     */
    public function listInsightsByAccount($account_guid, $user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsByAccount'][0])
    {
        list($response) = $this->listInsightsByAccountWithHttpInfo($account_guid, $user_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listInsightsByAccountWithHttpInfo
     *
     * List insights by account
     *
     * @param  string $account_guid The unique id for the &#x60;account&#x60;. (required)
     * @param  string $user_guid The unique id for the &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsByAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InsightsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInsightsByAccountWithHttpInfo($account_guid, $user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsByAccount'][0])
    {
        $request = $this->listInsightsByAccountRequest($account_guid, $user_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InsightsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InsightsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InsightsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listInsightsByAccountAsync
     *
     * List insights by account
     *
     * @param  string $account_guid The unique id for the &#x60;account&#x60;. (required)
     * @param  string $user_guid The unique id for the &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsByAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInsightsByAccountAsync($account_guid, $user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsByAccount'][0])
    {
        return $this->listInsightsByAccountAsyncWithHttpInfo($account_guid, $user_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInsightsByAccountAsyncWithHttpInfo
     *
     * List insights by account
     *
     * @param  string $account_guid The unique id for the &#x60;account&#x60;. (required)
     * @param  string $user_guid The unique id for the &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsByAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInsightsByAccountAsyncWithHttpInfo($account_guid, $user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsByAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InsightsResponseBody';
        $request = $this->listInsightsByAccountRequest($account_guid, $user_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInsightsByAccount'
     *
     * @param  string $account_guid The unique id for the &#x60;account&#x60;. (required)
     * @param  string $user_guid The unique id for the &#x60;user&#x60;. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsByAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInsightsByAccountRequest($account_guid, $user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsByAccount'][0])
    {

        // verify the required parameter 'account_guid' is set
        if ($account_guid === null || (is_array($account_guid) && count($account_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_guid when calling listInsightsByAccount'
            );
        }

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listInsightsByAccount'
            );
        }




        $resourcePath = '/users/{user_guid}/accounts/{account_guid}/insights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'account_guid' . '}',
                ObjectSerializer::toPathValue($account_guid),
                $resourcePath
            );
        }
        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInsightsUser
     *
     * List all insights for a user.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InsightsResponseBody
     */
    public function listInsightsUser($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsUser'][0])
    {
        list($response) = $this->listInsightsUserWithHttpInfo($user_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listInsightsUserWithHttpInfo
     *
     * List all insights for a user.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InsightsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInsightsUserWithHttpInfo($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsUser'][0])
    {
        $request = $this->listInsightsUserRequest($user_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InsightsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InsightsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InsightsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listInsightsUserAsync
     *
     * List all insights for a user.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInsightsUserAsync($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsUser'][0])
    {
        return $this->listInsightsUserAsyncWithHttpInfo($user_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInsightsUserAsyncWithHttpInfo
     *
     * List all insights for a user.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInsightsUserAsyncWithHttpInfo($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InsightsResponseBody';
        $request = $this->listInsightsUserRequest($user_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInsightsUser'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInsightsUserRequest($user_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listInsightsUser'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listInsightsUser'
            );
        }




        $resourcePath = '/users/{user_guid}/insights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMerchantsInsight
     *
     * List all merchants associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMerchantsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MerchantsResponseBody
     */
    public function listMerchantsInsight($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listMerchantsInsight'][0])
    {
        list($response) = $this->listMerchantsInsightWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listMerchantsInsightWithHttpInfo
     *
     * List all merchants associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMerchantsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MerchantsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMerchantsInsightWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listMerchantsInsight'][0])
    {
        $request = $this->listMerchantsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MerchantsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\MerchantsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MerchantsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listMerchantsInsightAsync
     *
     * List all merchants associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMerchantsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMerchantsInsightAsync($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listMerchantsInsight'][0])
    {
        return $this->listMerchantsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMerchantsInsightAsyncWithHttpInfo
     *
     * List all merchants associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMerchantsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMerchantsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listMerchantsInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MerchantsResponseBody';
        $request = $this->listMerchantsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMerchantsInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMerchantsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMerchantsInsightRequest($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listMerchantsInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listMerchantsInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling listMerchantsInsight'
            );
        }




        $resourcePath = '/users/{user_guid}/insights/{insight_guid}/merchants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listScheduledPaymentsInsight
     *
     * List all scheduled payments associated with an insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listScheduledPaymentsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ScheduledPaymentsResponseBody
     */
    public function listScheduledPaymentsInsight($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listScheduledPaymentsInsight'][0])
    {
        list($response) = $this->listScheduledPaymentsInsightWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listScheduledPaymentsInsightWithHttpInfo
     *
     * List all scheduled payments associated with an insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listScheduledPaymentsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ScheduledPaymentsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listScheduledPaymentsInsightWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listScheduledPaymentsInsight'][0])
    {
        $request = $this->listScheduledPaymentsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ScheduledPaymentsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ScheduledPaymentsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ScheduledPaymentsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listScheduledPaymentsInsightAsync
     *
     * List all scheduled payments associated with an insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listScheduledPaymentsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listScheduledPaymentsInsightAsync($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listScheduledPaymentsInsight'][0])
    {
        return $this->listScheduledPaymentsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listScheduledPaymentsInsightAsyncWithHttpInfo
     *
     * List all scheduled payments associated with an insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listScheduledPaymentsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listScheduledPaymentsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listScheduledPaymentsInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ScheduledPaymentsResponseBody';
        $request = $this->listScheduledPaymentsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listScheduledPaymentsInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listScheduledPaymentsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listScheduledPaymentsInsightRequest($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listScheduledPaymentsInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listScheduledPaymentsInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling listScheduledPaymentsInsight'
            );
        }




        $resourcePath = '/users/{user_guid}/insights/{insight_guid}/scheduled_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransactionsInsight
     *
     * List all transactions associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTransactionsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionsResponseBody
     */
    public function listTransactionsInsight($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listTransactionsInsight'][0])
    {
        list($response) = $this->listTransactionsInsightWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType);
        return $response;
    }

    /**
     * Operation listTransactionsInsightWithHttpInfo
     *
     * List all transactions associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTransactionsInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionsResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransactionsInsightWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listTransactionsInsight'][0])
    {
        $request = $this->listTransactionsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TransactionsResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TransactionsResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTransactionsInsightAsync
     *
     * List all transactions associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTransactionsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsInsightAsync($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listTransactionsInsight'][0])
    {
        return $this->listTransactionsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page, $records_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransactionsInsightAsyncWithHttpInfo
     *
     * List all transactions associated with an insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTransactionsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsInsightAsyncWithHttpInfo($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listTransactionsInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionsResponseBody';
        $request = $this->listTransactionsInsightRequest($user_guid, $insight_guid, $page, $records_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransactionsInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  int|null $page Specify current page. (optional)
     * @param  int|null $records_per_page Specify records per page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTransactionsInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTransactionsInsightRequest($user_guid, $insight_guid, $page = null, $records_per_page = null, string $contentType = self::contentTypes['listTransactionsInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling listTransactionsInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling listTransactionsInsight'
            );
        }




        $resourcePath = '/users/{user_guid}/insights/{insight_guid}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records_per_page,
            'records_per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readInsightsUser
     *
     * Read a specific insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readInsightsUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InsightResponseBody
     */
    public function readInsightsUser($user_guid, $insight_guid, string $contentType = self::contentTypes['readInsightsUser'][0])
    {
        list($response) = $this->readInsightsUserWithHttpInfo($user_guid, $insight_guid, $contentType);
        return $response;
    }

    /**
     * Operation readInsightsUserWithHttpInfo
     *
     * Read a specific insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readInsightsUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InsightResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function readInsightsUserWithHttpInfo($user_guid, $insight_guid, string $contentType = self::contentTypes['readInsightsUser'][0])
    {
        $request = $this->readInsightsUserRequest($user_guid, $insight_guid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InsightResponseBody',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InsightResponseBody',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InsightResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation readInsightsUserAsync
     *
     * Read a specific insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readInsightsUserAsync($user_guid, $insight_guid, string $contentType = self::contentTypes['readInsightsUser'][0])
    {
        return $this->readInsightsUserAsyncWithHttpInfo($user_guid, $insight_guid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readInsightsUserAsyncWithHttpInfo
     *
     * Read a specific insight.
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readInsightsUserAsyncWithHttpInfo($user_guid, $insight_guid, string $contentType = self::contentTypes['readInsightsUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InsightResponseBody';
        $request = $this->readInsightsUserRequest($user_guid, $insight_guid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readInsightsUser'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readInsightsUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readInsightsUserRequest($user_guid, $insight_guid, string $contentType = self::contentTypes['readInsightsUser'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling readInsightsUser'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling readInsightsUser'
            );
        }


        $resourcePath = '/users/{user_guid}/insights{insight_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInsight
     *
     * Update insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  \OpenAPI\Client\Model\InsightUpdateRequest $insight_update_request The insight to be updated (None of these parameters are required, but the user object cannot be empty.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InsightResponse
     */
    public function updateInsight($user_guid, $insight_guid, $insight_update_request, string $contentType = self::contentTypes['updateInsight'][0])
    {
        list($response) = $this->updateInsightWithHttpInfo($user_guid, $insight_guid, $insight_update_request, $contentType);
        return $response;
    }

    /**
     * Operation updateInsightWithHttpInfo
     *
     * Update insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  \OpenAPI\Client\Model\InsightUpdateRequest $insight_update_request The insight to be updated (None of these parameters are required, but the user object cannot be empty.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInsight'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InsightResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInsightWithHttpInfo($user_guid, $insight_guid, $insight_update_request, string $contentType = self::contentTypes['updateInsight'][0])
    {
        $request = $this->updateInsightRequest($user_guid, $insight_guid, $insight_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InsightResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InsightResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InsightResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateInsightAsync
     *
     * Update insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  \OpenAPI\Client\Model\InsightUpdateRequest $insight_update_request The insight to be updated (None of these parameters are required, but the user object cannot be empty.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsightAsync($user_guid, $insight_guid, $insight_update_request, string $contentType = self::contentTypes['updateInsight'][0])
    {
        return $this->updateInsightAsyncWithHttpInfo($user_guid, $insight_guid, $insight_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInsightAsyncWithHttpInfo
     *
     * Update insight
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  \OpenAPI\Client\Model\InsightUpdateRequest $insight_update_request The insight to be updated (None of these parameters are required, but the user object cannot be empty.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInsightAsyncWithHttpInfo($user_guid, $insight_guid, $insight_update_request, string $contentType = self::contentTypes['updateInsight'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InsightResponse';
        $request = $this->updateInsightRequest($user_guid, $insight_guid, $insight_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInsight'
     *
     * @param  string $user_guid The unique identifier for the user. Defined by MX. (required)
     * @param  string $insight_guid The unique identifier for the insight. Defined by MX. (required)
     * @param  \OpenAPI\Client\Model\InsightUpdateRequest $insight_update_request The insight to be updated (None of these parameters are required, but the user object cannot be empty.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInsight'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInsightRequest($user_guid, $insight_guid, $insight_update_request, string $contentType = self::contentTypes['updateInsight'][0])
    {

        // verify the required parameter 'user_guid' is set
        if ($user_guid === null || (is_array($user_guid) && count($user_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_guid when calling updateInsight'
            );
        }

        // verify the required parameter 'insight_guid' is set
        if ($insight_guid === null || (is_array($insight_guid) && count($insight_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_guid when calling updateInsight'
            );
        }

        // verify the required parameter 'insight_update_request' is set
        if ($insight_update_request === null || (is_array($insight_update_request) && count($insight_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $insight_update_request when calling updateInsight'
            );
        }


        $resourcePath = '/users/{user_guid}/insights{insight_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'user_guid' . '}',
                ObjectSerializer::toPathValue($user_guid),
                $resourcePath
            );
        }
        // path params
        if ($insight_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'insight_guid' . '}',
                ObjectSerializer::toPathValue($insight_guid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.mx.api.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($insight_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($insight_update_request));
            } else {
                $httpBody = $insight_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
