<?php
/**
 * MemberStatusResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MemberStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MemberStatusResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MemberStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aggregated_at' => 'string',
        'challenges' => '\OpenAPI\Client\Model\ChallengeResponse[]',
        'connection_status' => 'string',
        'guid' => 'string',
        'has_processed_accounts' => 'bool',
        'has_processed_account_numbers' => 'bool',
        'has_processed_transactions' => 'bool',
        'is_authenticated' => 'bool',
        'is_being_aggregated' => 'bool',
        'successfully_aggregated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aggregated_at' => null,
        'challenges' => null,
        'connection_status' => null,
        'guid' => null,
        'has_processed_accounts' => null,
        'has_processed_account_numbers' => null,
        'has_processed_transactions' => null,
        'is_authenticated' => null,
        'is_being_aggregated' => null,
        'successfully_aggregated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aggregated_at' => true,
        'challenges' => false,
        'connection_status' => true,
        'guid' => true,
        'has_processed_accounts' => true,
        'has_processed_account_numbers' => true,
        'has_processed_transactions' => true,
        'is_authenticated' => true,
        'is_being_aggregated' => true,
        'successfully_aggregated_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregated_at' => 'aggregated_at',
        'challenges' => 'challenges',
        'connection_status' => 'connection_status',
        'guid' => 'guid',
        'has_processed_accounts' => 'has_processed_accounts',
        'has_processed_account_numbers' => 'has_processed_account_numbers',
        'has_processed_transactions' => 'has_processed_transactions',
        'is_authenticated' => 'is_authenticated',
        'is_being_aggregated' => 'is_being_aggregated',
        'successfully_aggregated_at' => 'successfully_aggregated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregated_at' => 'setAggregatedAt',
        'challenges' => 'setChallenges',
        'connection_status' => 'setConnectionStatus',
        'guid' => 'setGuid',
        'has_processed_accounts' => 'setHasProcessedAccounts',
        'has_processed_account_numbers' => 'setHasProcessedAccountNumbers',
        'has_processed_transactions' => 'setHasProcessedTransactions',
        'is_authenticated' => 'setIsAuthenticated',
        'is_being_aggregated' => 'setIsBeingAggregated',
        'successfully_aggregated_at' => 'setSuccessfullyAggregatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregated_at' => 'getAggregatedAt',
        'challenges' => 'getChallenges',
        'connection_status' => 'getConnectionStatus',
        'guid' => 'getGuid',
        'has_processed_accounts' => 'getHasProcessedAccounts',
        'has_processed_account_numbers' => 'getHasProcessedAccountNumbers',
        'has_processed_transactions' => 'getHasProcessedTransactions',
        'is_authenticated' => 'getIsAuthenticated',
        'is_being_aggregated' => 'getIsBeingAggregated',
        'successfully_aggregated_at' => 'getSuccessfullyAggregatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aggregated_at', $data ?? [], null);
        $this->setIfExists('challenges', $data ?? [], null);
        $this->setIfExists('connection_status', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('has_processed_accounts', $data ?? [], null);
        $this->setIfExists('has_processed_account_numbers', $data ?? [], null);
        $this->setIfExists('has_processed_transactions', $data ?? [], null);
        $this->setIfExists('is_authenticated', $data ?? [], null);
        $this->setIfExists('is_being_aggregated', $data ?? [], null);
        $this->setIfExists('successfully_aggregated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregated_at
     *
     * @return string|null
     */
    public function getAggregatedAt()
    {
        return $this->container['aggregated_at'];
    }

    /**
     * Sets aggregated_at
     *
     * @param string|null $aggregated_at aggregated_at
     *
     * @return self
     */
    public function setAggregatedAt($aggregated_at)
    {
        if (is_null($aggregated_at)) {
            array_push($this->openAPINullablesSetToNull, 'aggregated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregated_at'] = $aggregated_at;

        return $this;
    }

    /**
     * Gets challenges
     *
     * @return \OpenAPI\Client\Model\ChallengeResponse[]|null
     */
    public function getChallenges()
    {
        return $this->container['challenges'];
    }

    /**
     * Sets challenges
     *
     * @param \OpenAPI\Client\Model\ChallengeResponse[]|null $challenges challenges
     *
     * @return self
     */
    public function setChallenges($challenges)
    {
        if (is_null($challenges)) {
            throw new \InvalidArgumentException('non-nullable challenges cannot be null');
        }
        $this->container['challenges'] = $challenges;

        return $this;
    }

    /**
     * Gets connection_status
     *
     * @return string|null
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string|null $connection_status connection_status
     *
     * @return self
     */
    public function setConnectionStatus($connection_status)
    {
        if (is_null($connection_status)) {
            array_push($this->openAPINullablesSetToNull, 'connection_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('connection_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets has_processed_accounts
     *
     * @return bool|null
     */
    public function getHasProcessedAccounts()
    {
        return $this->container['has_processed_accounts'];
    }

    /**
     * Sets has_processed_accounts
     *
     * @param bool|null $has_processed_accounts has_processed_accounts
     *
     * @return self
     */
    public function setHasProcessedAccounts($has_processed_accounts)
    {
        if (is_null($has_processed_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'has_processed_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_processed_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_processed_accounts'] = $has_processed_accounts;

        return $this;
    }

    /**
     * Gets has_processed_account_numbers
     *
     * @return bool|null
     */
    public function getHasProcessedAccountNumbers()
    {
        return $this->container['has_processed_account_numbers'];
    }

    /**
     * Sets has_processed_account_numbers
     *
     * @param bool|null $has_processed_account_numbers has_processed_account_numbers
     *
     * @return self
     */
    public function setHasProcessedAccountNumbers($has_processed_account_numbers)
    {
        if (is_null($has_processed_account_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'has_processed_account_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_processed_account_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_processed_account_numbers'] = $has_processed_account_numbers;

        return $this;
    }

    /**
     * Gets has_processed_transactions
     *
     * @return bool|null
     */
    public function getHasProcessedTransactions()
    {
        return $this->container['has_processed_transactions'];
    }

    /**
     * Sets has_processed_transactions
     *
     * @param bool|null $has_processed_transactions has_processed_transactions
     *
     * @return self
     */
    public function setHasProcessedTransactions($has_processed_transactions)
    {
        if (is_null($has_processed_transactions)) {
            array_push($this->openAPINullablesSetToNull, 'has_processed_transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_processed_transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_processed_transactions'] = $has_processed_transactions;

        return $this;
    }

    /**
     * Gets is_authenticated
     *
     * @return bool|null
     */
    public function getIsAuthenticated()
    {
        return $this->container['is_authenticated'];
    }

    /**
     * Sets is_authenticated
     *
     * @param bool|null $is_authenticated is_authenticated
     *
     * @return self
     */
    public function setIsAuthenticated($is_authenticated)
    {
        if (is_null($is_authenticated)) {
            array_push($this->openAPINullablesSetToNull, 'is_authenticated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_authenticated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_authenticated'] = $is_authenticated;

        return $this;
    }

    /**
     * Gets is_being_aggregated
     *
     * @return bool|null
     */
    public function getIsBeingAggregated()
    {
        return $this->container['is_being_aggregated'];
    }

    /**
     * Sets is_being_aggregated
     *
     * @param bool|null $is_being_aggregated is_being_aggregated
     *
     * @return self
     */
    public function setIsBeingAggregated($is_being_aggregated)
    {
        if (is_null($is_being_aggregated)) {
            array_push($this->openAPINullablesSetToNull, 'is_being_aggregated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_being_aggregated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_being_aggregated'] = $is_being_aggregated;

        return $this;
    }

    /**
     * Gets successfully_aggregated_at
     *
     * @return string|null
     */
    public function getSuccessfullyAggregatedAt()
    {
        return $this->container['successfully_aggregated_at'];
    }

    /**
     * Sets successfully_aggregated_at
     *
     * @param string|null $successfully_aggregated_at successfully_aggregated_at
     *
     * @return self
     */
    public function setSuccessfullyAggregatedAt($successfully_aggregated_at)
    {
        if (is_null($successfully_aggregated_at)) {
            array_push($this->openAPINullablesSetToNull, 'successfully_aggregated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successfully_aggregated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['successfully_aggregated_at'] = $successfully_aggregated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


