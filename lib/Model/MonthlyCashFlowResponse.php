<?php
/**
 * MonthlyCashFlowResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MonthlyCashFlowResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MonthlyCashFlowResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MonthlyCashFlowResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guid' => 'string',
        'user_guid' => 'string',
        'budgeted_income' => 'float',
        'budgeted_expenses' => 'float',
        'goals_contribution' => 'float',
        'estimated_goals_contribution' => 'int',
        'uses_estimated_goals_contribution' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guid' => null,
        'user_guid' => null,
        'budgeted_income' => null,
        'budgeted_expenses' => null,
        'goals_contribution' => null,
        'estimated_goals_contribution' => null,
        'uses_estimated_goals_contribution' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'guid' => false,
        'user_guid' => false,
        'budgeted_income' => false,
        'budgeted_expenses' => false,
        'goals_contribution' => false,
        'estimated_goals_contribution' => false,
        'uses_estimated_goals_contribution' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'user_guid' => 'user_guid',
        'budgeted_income' => 'budgeted_income',
        'budgeted_expenses' => 'budgeted_expenses',
        'goals_contribution' => 'goals_contribution',
        'estimated_goals_contribution' => 'estimated_goals_contribution',
        'uses_estimated_goals_contribution' => 'uses_estimated_goals_contribution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'user_guid' => 'setUserGuid',
        'budgeted_income' => 'setBudgetedIncome',
        'budgeted_expenses' => 'setBudgetedExpenses',
        'goals_contribution' => 'setGoalsContribution',
        'estimated_goals_contribution' => 'setEstimatedGoalsContribution',
        'uses_estimated_goals_contribution' => 'setUsesEstimatedGoalsContribution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'user_guid' => 'getUserGuid',
        'budgeted_income' => 'getBudgetedIncome',
        'budgeted_expenses' => 'getBudgetedExpenses',
        'goals_contribution' => 'getGoalsContribution',
        'estimated_goals_contribution' => 'getEstimatedGoalsContribution',
        'uses_estimated_goals_contribution' => 'getUsesEstimatedGoalsContribution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
        $this->setIfExists('budgeted_income', $data ?? [], null);
        $this->setIfExists('budgeted_expenses', $data ?? [], null);
        $this->setIfExists('goals_contribution', $data ?? [], null);
        $this->setIfExists('estimated_goals_contribution', $data ?? [], null);
        $this->setIfExists('uses_estimated_goals_contribution', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid Unique identifier for the monthly cash flow profile. Defined by MX.
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid Unique identifier for the user the monthly cash flow profile is attached to. Defined by MX.
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            throw new \InvalidArgumentException('non-nullable user_guid cannot be null');
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }

    /**
     * Gets budgeted_income
     *
     * @return float|null
     */
    public function getBudgetedIncome()
    {
        return $this->container['budgeted_income'];
    }

    /**
     * Sets budgeted_income
     *
     * @param float|null $budgeted_income The amount of the budgeted income for the user.
     *
     * @return self
     */
    public function setBudgetedIncome($budgeted_income)
    {
        if (is_null($budgeted_income)) {
            throw new \InvalidArgumentException('non-nullable budgeted_income cannot be null');
        }
        $this->container['budgeted_income'] = $budgeted_income;

        return $this;
    }

    /**
     * Gets budgeted_expenses
     *
     * @return float|null
     */
    public function getBudgetedExpenses()
    {
        return $this->container['budgeted_expenses'];
    }

    /**
     * Sets budgeted_expenses
     *
     * @param float|null $budgeted_expenses The amount of the budgeted expenses for the user.
     *
     * @return self
     */
    public function setBudgetedExpenses($budgeted_expenses)
    {
        if (is_null($budgeted_expenses)) {
            throw new \InvalidArgumentException('non-nullable budgeted_expenses cannot be null');
        }
        $this->container['budgeted_expenses'] = $budgeted_expenses;

        return $this;
    }

    /**
     * Gets goals_contribution
     *
     * @return float|null
     */
    public function getGoalsContribution()
    {
        return $this->container['goals_contribution'];
    }

    /**
     * Sets goals_contribution
     *
     * @param float|null $goals_contribution The monthly dollar amount allocated for goals.
     *
     * @return self
     */
    public function setGoalsContribution($goals_contribution)
    {
        if (is_null($goals_contribution)) {
            throw new \InvalidArgumentException('non-nullable goals_contribution cannot be null');
        }
        $this->container['goals_contribution'] = $goals_contribution;

        return $this;
    }

    /**
     * Gets estimated_goals_contribution
     *
     * @return int|null
     */
    public function getEstimatedGoalsContribution()
    {
        return $this->container['estimated_goals_contribution'];
    }

    /**
     * Sets estimated_goals_contribution
     *
     * @param int|null $estimated_goals_contribution The estimated monthly dollar amount allocated for goals calculated from income and budgets.
     *
     * @return self
     */
    public function setEstimatedGoalsContribution($estimated_goals_contribution)
    {
        if (is_null($estimated_goals_contribution)) {
            throw new \InvalidArgumentException('non-nullable estimated_goals_contribution cannot be null');
        }
        $this->container['estimated_goals_contribution'] = $estimated_goals_contribution;

        return $this;
    }

    /**
     * Gets uses_estimated_goals_contribution
     *
     * @return bool|null
     */
    public function getUsesEstimatedGoalsContribution()
    {
        return $this->container['uses_estimated_goals_contribution'];
    }

    /**
     * Sets uses_estimated_goals_contribution
     *
     * @param bool|null $uses_estimated_goals_contribution uses_estimated_goals_contribution
     *
     * @return self
     */
    public function setUsesEstimatedGoalsContribution($uses_estimated_goals_contribution)
    {
        if (is_null($uses_estimated_goals_contribution)) {
            throw new \InvalidArgumentException('non-nullable uses_estimated_goals_contribution cannot be null');
        }
        $this->container['uses_estimated_goals_contribution'] = $uses_estimated_goals_contribution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


