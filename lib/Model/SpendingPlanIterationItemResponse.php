<?php
/**
 * SpendingPlanIterationItemResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SpendingPlanIterationItemResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpendingPlanIterationItemResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpendingPlanIterationItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_amount' => 'float',
        'category_guid' => 'string',
        'created_at' => 'string',
        'guid' => 'string',
        'item_type' => 'string',
        'planned_amount' => 'float',
        'scheduled_payment_guid' => 'string',
        'spending_plan_iteration_guid' => 'string',
        'top_level_category_guid' => 'string',
        'transaction_guids' => 'string[]',
        'updated_at' => 'string',
        'user_guid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_amount' => null,
        'category_guid' => null,
        'created_at' => null,
        'guid' => null,
        'item_type' => null,
        'planned_amount' => null,
        'scheduled_payment_guid' => null,
        'spending_plan_iteration_guid' => null,
        'top_level_category_guid' => null,
        'transaction_guids' => null,
        'updated_at' => null,
        'user_guid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_amount' => true,
        'category_guid' => true,
        'created_at' => true,
        'guid' => true,
        'item_type' => true,
        'planned_amount' => true,
        'scheduled_payment_guid' => true,
        'spending_plan_iteration_guid' => true,
        'top_level_category_guid' => true,
        'transaction_guids' => false,
        'updated_at' => true,
        'user_guid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_amount' => 'actual_amount',
        'category_guid' => 'category_guid',
        'created_at' => 'created_at',
        'guid' => 'guid',
        'item_type' => 'item_type',
        'planned_amount' => 'planned_amount',
        'scheduled_payment_guid' => 'scheduled_payment_guid',
        'spending_plan_iteration_guid' => 'spending_plan_iteration_guid',
        'top_level_category_guid' => 'top_level_category_guid',
        'transaction_guids' => 'transaction_guids',
        'updated_at' => 'updated_at',
        'user_guid' => 'user_guid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_amount' => 'setActualAmount',
        'category_guid' => 'setCategoryGuid',
        'created_at' => 'setCreatedAt',
        'guid' => 'setGuid',
        'item_type' => 'setItemType',
        'planned_amount' => 'setPlannedAmount',
        'scheduled_payment_guid' => 'setScheduledPaymentGuid',
        'spending_plan_iteration_guid' => 'setSpendingPlanIterationGuid',
        'top_level_category_guid' => 'setTopLevelCategoryGuid',
        'transaction_guids' => 'setTransactionGuids',
        'updated_at' => 'setUpdatedAt',
        'user_guid' => 'setUserGuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_amount' => 'getActualAmount',
        'category_guid' => 'getCategoryGuid',
        'created_at' => 'getCreatedAt',
        'guid' => 'getGuid',
        'item_type' => 'getItemType',
        'planned_amount' => 'getPlannedAmount',
        'scheduled_payment_guid' => 'getScheduledPaymentGuid',
        'spending_plan_iteration_guid' => 'getSpendingPlanIterationGuid',
        'top_level_category_guid' => 'getTopLevelCategoryGuid',
        'transaction_guids' => 'getTransactionGuids',
        'updated_at' => 'getUpdatedAt',
        'user_guid' => 'getUserGuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('actual_amount', $data ?? [], null);
        $this->setIfExists('category_guid', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('planned_amount', $data ?? [], null);
        $this->setIfExists('scheduled_payment_guid', $data ?? [], null);
        $this->setIfExists('spending_plan_iteration_guid', $data ?? [], null);
        $this->setIfExists('top_level_category_guid', $data ?? [], null);
        $this->setIfExists('transaction_guids', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_amount
     *
     * @return float|null
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param float|null $actual_amount actual_amount
     *
     * @return self
     */
    public function setActualAmount($actual_amount)
    {
        if (is_null($actual_amount)) {
            array_push($this->openAPINullablesSetToNull, 'actual_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets category_guid
     *
     * @return string|null
     */
    public function getCategoryGuid()
    {
        return $this->container['category_guid'];
    }

    /**
     * Sets category_guid
     *
     * @param string|null $category_guid category_guid
     *
     * @return self
     */
    public function setCategoryGuid($category_guid)
    {
        if (is_null($category_guid)) {
            array_push($this->openAPINullablesSetToNull, 'category_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_guid'] = $category_guid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            array_push($this->openAPINullablesSetToNull, 'item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets planned_amount
     *
     * @return float|null
     */
    public function getPlannedAmount()
    {
        return $this->container['planned_amount'];
    }

    /**
     * Sets planned_amount
     *
     * @param float|null $planned_amount planned_amount
     *
     * @return self
     */
    public function setPlannedAmount($planned_amount)
    {
        if (is_null($planned_amount)) {
            array_push($this->openAPINullablesSetToNull, 'planned_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planned_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['planned_amount'] = $planned_amount;

        return $this;
    }

    /**
     * Gets scheduled_payment_guid
     *
     * @return string|null
     */
    public function getScheduledPaymentGuid()
    {
        return $this->container['scheduled_payment_guid'];
    }

    /**
     * Sets scheduled_payment_guid
     *
     * @param string|null $scheduled_payment_guid scheduled_payment_guid
     *
     * @return self
     */
    public function setScheduledPaymentGuid($scheduled_payment_guid)
    {
        if (is_null($scheduled_payment_guid)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_payment_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_payment_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_payment_guid'] = $scheduled_payment_guid;

        return $this;
    }

    /**
     * Gets spending_plan_iteration_guid
     *
     * @return string|null
     */
    public function getSpendingPlanIterationGuid()
    {
        return $this->container['spending_plan_iteration_guid'];
    }

    /**
     * Sets spending_plan_iteration_guid
     *
     * @param string|null $spending_plan_iteration_guid spending_plan_iteration_guid
     *
     * @return self
     */
    public function setSpendingPlanIterationGuid($spending_plan_iteration_guid)
    {
        if (is_null($spending_plan_iteration_guid)) {
            array_push($this->openAPINullablesSetToNull, 'spending_plan_iteration_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spending_plan_iteration_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spending_plan_iteration_guid'] = $spending_plan_iteration_guid;

        return $this;
    }

    /**
     * Gets top_level_category_guid
     *
     * @return string|null
     */
    public function getTopLevelCategoryGuid()
    {
        return $this->container['top_level_category_guid'];
    }

    /**
     * Sets top_level_category_guid
     *
     * @param string|null $top_level_category_guid top_level_category_guid
     *
     * @return self
     */
    public function setTopLevelCategoryGuid($top_level_category_guid)
    {
        if (is_null($top_level_category_guid)) {
            array_push($this->openAPINullablesSetToNull, 'top_level_category_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_level_category_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_level_category_guid'] = $top_level_category_guid;

        return $this;
    }

    /**
     * Gets transaction_guids
     *
     * @return string[]|null
     */
    public function getTransactionGuids()
    {
        return $this->container['transaction_guids'];
    }

    /**
     * Sets transaction_guids
     *
     * @param string[]|null $transaction_guids transaction_guids
     *
     * @return self
     */
    public function setTransactionGuids($transaction_guids)
    {
        if (is_null($transaction_guids)) {
            throw new \InvalidArgumentException('non-nullable transaction_guids cannot be null');
        }
        $this->container['transaction_guids'] = $transaction_guids;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid user_guid
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            array_push($this->openAPINullablesSetToNull, 'user_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


