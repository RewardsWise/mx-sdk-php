<?php
/**
 * ConnectWidgetRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConnectWidgetRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConnectWidgetRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectWidgetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_redirect_url' => 'string',
        'color_scheme' => 'string',
        'current_institution_code' => 'string',
        'current_member_guid' => 'string',
        'disable_background_agg' => 'bool',
        'disable_institution_search' => 'bool',
        'include_identity' => 'bool',
        'include_transactions' => 'bool',
        'is_mobile_webview' => 'bool',
        'mode' => 'string',
        'oauth_referral_source' => 'string',
        'ui_message_version' => 'int',
        'ui_message_webview_url_scheme' => 'string',
        'update_credentials' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_redirect_url' => null,
        'color_scheme' => null,
        'current_institution_code' => null,
        'current_member_guid' => null,
        'disable_background_agg' => null,
        'disable_institution_search' => null,
        'include_identity' => null,
        'include_transactions' => null,
        'is_mobile_webview' => null,
        'mode' => null,
        'oauth_referral_source' => null,
        'ui_message_version' => null,
        'ui_message_webview_url_scheme' => null,
        'update_credentials' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_redirect_url' => false,
        'color_scheme' => false,
        'current_institution_code' => false,
        'current_member_guid' => false,
        'disable_background_agg' => false,
        'disable_institution_search' => false,
        'include_identity' => false,
        'include_transactions' => false,
        'is_mobile_webview' => false,
        'mode' => false,
        'oauth_referral_source' => false,
        'ui_message_version' => false,
        'ui_message_webview_url_scheme' => false,
        'update_credentials' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_redirect_url' => 'client_redirect_url',
        'color_scheme' => 'color_scheme',
        'current_institution_code' => 'current_institution_code',
        'current_member_guid' => 'current_member_guid',
        'disable_background_agg' => 'disable_background_agg',
        'disable_institution_search' => 'disable_institution_search',
        'include_identity' => 'include_identity',
        'include_transactions' => 'include_transactions',
        'is_mobile_webview' => 'is_mobile_webview',
        'mode' => 'mode',
        'oauth_referral_source' => 'oauth_referral_source',
        'ui_message_version' => 'ui_message_version',
        'ui_message_webview_url_scheme' => 'ui_message_webview_url_scheme',
        'update_credentials' => 'update_credentials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_redirect_url' => 'setClientRedirectUrl',
        'color_scheme' => 'setColorScheme',
        'current_institution_code' => 'setCurrentInstitutionCode',
        'current_member_guid' => 'setCurrentMemberGuid',
        'disable_background_agg' => 'setDisableBackgroundAgg',
        'disable_institution_search' => 'setDisableInstitutionSearch',
        'include_identity' => 'setIncludeIdentity',
        'include_transactions' => 'setIncludeTransactions',
        'is_mobile_webview' => 'setIsMobileWebview',
        'mode' => 'setMode',
        'oauth_referral_source' => 'setOauthReferralSource',
        'ui_message_version' => 'setUiMessageVersion',
        'ui_message_webview_url_scheme' => 'setUiMessageWebviewUrlScheme',
        'update_credentials' => 'setUpdateCredentials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_redirect_url' => 'getClientRedirectUrl',
        'color_scheme' => 'getColorScheme',
        'current_institution_code' => 'getCurrentInstitutionCode',
        'current_member_guid' => 'getCurrentMemberGuid',
        'disable_background_agg' => 'getDisableBackgroundAgg',
        'disable_institution_search' => 'getDisableInstitutionSearch',
        'include_identity' => 'getIncludeIdentity',
        'include_transactions' => 'getIncludeTransactions',
        'is_mobile_webview' => 'getIsMobileWebview',
        'mode' => 'getMode',
        'oauth_referral_source' => 'getOauthReferralSource',
        'ui_message_version' => 'getUiMessageVersion',
        'ui_message_webview_url_scheme' => 'getUiMessageWebviewUrlScheme',
        'update_credentials' => 'getUpdateCredentials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_redirect_url', $data ?? [], null);
        $this->setIfExists('color_scheme', $data ?? [], null);
        $this->setIfExists('current_institution_code', $data ?? [], null);
        $this->setIfExists('current_member_guid', $data ?? [], null);
        $this->setIfExists('disable_background_agg', $data ?? [], null);
        $this->setIfExists('disable_institution_search', $data ?? [], null);
        $this->setIfExists('include_identity', $data ?? [], null);
        $this->setIfExists('include_transactions', $data ?? [], null);
        $this->setIfExists('is_mobile_webview', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('oauth_referral_source', $data ?? [], null);
        $this->setIfExists('ui_message_version', $data ?? [], null);
        $this->setIfExists('ui_message_webview_url_scheme', $data ?? [], null);
        $this->setIfExists('update_credentials', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_redirect_url
     *
     * @return string|null
     */
    public function getClientRedirectUrl()
    {
        return $this->container['client_redirect_url'];
    }

    /**
     * Sets client_redirect_url
     *
     * @param string|null $client_redirect_url client_redirect_url
     *
     * @return self
     */
    public function setClientRedirectUrl($client_redirect_url)
    {
        if (is_null($client_redirect_url)) {
            throw new \InvalidArgumentException('non-nullable client_redirect_url cannot be null');
        }
        $this->container['client_redirect_url'] = $client_redirect_url;

        return $this;
    }

    /**
     * Gets color_scheme
     *
     * @return string|null
     */
    public function getColorScheme()
    {
        return $this->container['color_scheme'];
    }

    /**
     * Sets color_scheme
     *
     * @param string|null $color_scheme color_scheme
     *
     * @return self
     */
    public function setColorScheme($color_scheme)
    {
        if (is_null($color_scheme)) {
            throw new \InvalidArgumentException('non-nullable color_scheme cannot be null');
        }
        $this->container['color_scheme'] = $color_scheme;

        return $this;
    }

    /**
     * Gets current_institution_code
     *
     * @return string|null
     */
    public function getCurrentInstitutionCode()
    {
        return $this->container['current_institution_code'];
    }

    /**
     * Sets current_institution_code
     *
     * @param string|null $current_institution_code current_institution_code
     *
     * @return self
     */
    public function setCurrentInstitutionCode($current_institution_code)
    {
        if (is_null($current_institution_code)) {
            throw new \InvalidArgumentException('non-nullable current_institution_code cannot be null');
        }
        $this->container['current_institution_code'] = $current_institution_code;

        return $this;
    }

    /**
     * Gets current_member_guid
     *
     * @return string|null
     */
    public function getCurrentMemberGuid()
    {
        return $this->container['current_member_guid'];
    }

    /**
     * Sets current_member_guid
     *
     * @param string|null $current_member_guid current_member_guid
     *
     * @return self
     */
    public function setCurrentMemberGuid($current_member_guid)
    {
        if (is_null($current_member_guid)) {
            throw new \InvalidArgumentException('non-nullable current_member_guid cannot be null');
        }
        $this->container['current_member_guid'] = $current_member_guid;

        return $this;
    }

    /**
     * Gets disable_background_agg
     *
     * @return bool|null
     */
    public function getDisableBackgroundAgg()
    {
        return $this->container['disable_background_agg'];
    }

    /**
     * Sets disable_background_agg
     *
     * @param bool|null $disable_background_agg disable_background_agg
     *
     * @return self
     */
    public function setDisableBackgroundAgg($disable_background_agg)
    {
        if (is_null($disable_background_agg)) {
            throw new \InvalidArgumentException('non-nullable disable_background_agg cannot be null');
        }
        $this->container['disable_background_agg'] = $disable_background_agg;

        return $this;
    }

    /**
     * Gets disable_institution_search
     *
     * @return bool|null
     */
    public function getDisableInstitutionSearch()
    {
        return $this->container['disable_institution_search'];
    }

    /**
     * Sets disable_institution_search
     *
     * @param bool|null $disable_institution_search disable_institution_search
     *
     * @return self
     */
    public function setDisableInstitutionSearch($disable_institution_search)
    {
        if (is_null($disable_institution_search)) {
            throw new \InvalidArgumentException('non-nullable disable_institution_search cannot be null');
        }
        $this->container['disable_institution_search'] = $disable_institution_search;

        return $this;
    }

    /**
     * Gets include_identity
     *
     * @return bool|null
     */
    public function getIncludeIdentity()
    {
        return $this->container['include_identity'];
    }

    /**
     * Sets include_identity
     *
     * @param bool|null $include_identity include_identity
     *
     * @return self
     */
    public function setIncludeIdentity($include_identity)
    {
        if (is_null($include_identity)) {
            throw new \InvalidArgumentException('non-nullable include_identity cannot be null');
        }
        $this->container['include_identity'] = $include_identity;

        return $this;
    }

    /**
     * Gets include_transactions
     *
     * @return bool|null
     */
    public function getIncludeTransactions()
    {
        return $this->container['include_transactions'];
    }

    /**
     * Sets include_transactions
     *
     * @param bool|null $include_transactions include_transactions
     *
     * @return self
     */
    public function setIncludeTransactions($include_transactions)
    {
        if (is_null($include_transactions)) {
            throw new \InvalidArgumentException('non-nullable include_transactions cannot be null');
        }
        $this->container['include_transactions'] = $include_transactions;

        return $this;
    }

    /**
     * Gets is_mobile_webview
     *
     * @return bool|null
     */
    public function getIsMobileWebview()
    {
        return $this->container['is_mobile_webview'];
    }

    /**
     * Sets is_mobile_webview
     *
     * @param bool|null $is_mobile_webview is_mobile_webview
     *
     * @return self
     */
    public function setIsMobileWebview($is_mobile_webview)
    {
        if (is_null($is_mobile_webview)) {
            throw new \InvalidArgumentException('non-nullable is_mobile_webview cannot be null');
        }
        $this->container['is_mobile_webview'] = $is_mobile_webview;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets oauth_referral_source
     *
     * @return string|null
     */
    public function getOauthReferralSource()
    {
        return $this->container['oauth_referral_source'];
    }

    /**
     * Sets oauth_referral_source
     *
     * @param string|null $oauth_referral_source oauth_referral_source
     *
     * @return self
     */
    public function setOauthReferralSource($oauth_referral_source)
    {
        if (is_null($oauth_referral_source)) {
            throw new \InvalidArgumentException('non-nullable oauth_referral_source cannot be null');
        }
        $this->container['oauth_referral_source'] = $oauth_referral_source;

        return $this;
    }

    /**
     * Gets ui_message_version
     *
     * @return int|null
     */
    public function getUiMessageVersion()
    {
        return $this->container['ui_message_version'];
    }

    /**
     * Sets ui_message_version
     *
     * @param int|null $ui_message_version ui_message_version
     *
     * @return self
     */
    public function setUiMessageVersion($ui_message_version)
    {
        if (is_null($ui_message_version)) {
            throw new \InvalidArgumentException('non-nullable ui_message_version cannot be null');
        }
        $this->container['ui_message_version'] = $ui_message_version;

        return $this;
    }

    /**
     * Gets ui_message_webview_url_scheme
     *
     * @return string|null
     */
    public function getUiMessageWebviewUrlScheme()
    {
        return $this->container['ui_message_webview_url_scheme'];
    }

    /**
     * Sets ui_message_webview_url_scheme
     *
     * @param string|null $ui_message_webview_url_scheme ui_message_webview_url_scheme
     *
     * @return self
     */
    public function setUiMessageWebviewUrlScheme($ui_message_webview_url_scheme)
    {
        if (is_null($ui_message_webview_url_scheme)) {
            throw new \InvalidArgumentException('non-nullable ui_message_webview_url_scheme cannot be null');
        }
        $this->container['ui_message_webview_url_scheme'] = $ui_message_webview_url_scheme;

        return $this;
    }

    /**
     * Gets update_credentials
     *
     * @return bool|null
     */
    public function getUpdateCredentials()
    {
        return $this->container['update_credentials'];
    }

    /**
     * Sets update_credentials
     *
     * @param bool|null $update_credentials update_credentials
     *
     * @return self
     */
    public function setUpdateCredentials($update_credentials)
    {
        if (is_null($update_credentials)) {
            throw new \InvalidArgumentException('non-nullable update_credentials cannot be null');
        }
        $this->container['update_credentials'] = $update_credentials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


