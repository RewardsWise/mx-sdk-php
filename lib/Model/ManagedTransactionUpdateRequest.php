<?php
/**
 * ManagedTransactionUpdateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ManagedTransactionUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ManagedTransactionUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ManagedTransactionUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'string',
        'category' => 'string',
        'check_number_string' => 'string',
        'currency_code' => 'string',
        'description' => 'string',
        'id' => 'string',
        'is_international' => 'bool',
        'latitude' => 'float',
        'localized_description' => 'string',
        'localized_memo' => 'string',
        'longitude' => 'float',
        'memo' => 'string',
        'merchant_category_code' => 'int',
        'merchant_guid' => 'string',
        'merchant_location_guid' => 'string',
        'metadata' => 'string',
        'posted_at' => 'string',
        'status' => 'string',
        'transacted_at' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'category' => null,
        'check_number_string' => null,
        'currency_code' => null,
        'description' => null,
        'id' => null,
        'is_international' => null,
        'latitude' => null,
        'localized_description' => null,
        'localized_memo' => null,
        'longitude' => null,
        'memo' => null,
        'merchant_category_code' => null,
        'merchant_guid' => null,
        'merchant_location_guid' => null,
        'metadata' => null,
        'posted_at' => null,
        'status' => null,
        'transacted_at' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'category' => false,
        'check_number_string' => false,
        'currency_code' => false,
        'description' => false,
        'id' => false,
        'is_international' => false,
        'latitude' => false,
        'localized_description' => false,
        'localized_memo' => false,
        'longitude' => false,
        'memo' => false,
        'merchant_category_code' => false,
        'merchant_guid' => false,
        'merchant_location_guid' => false,
        'metadata' => false,
        'posted_at' => false,
        'status' => false,
        'transacted_at' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'category' => 'category',
        'check_number_string' => 'check_number_string',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'id' => 'id',
        'is_international' => 'is_international',
        'latitude' => 'latitude',
        'localized_description' => 'localized_description',
        'localized_memo' => 'localized_memo',
        'longitude' => 'longitude',
        'memo' => 'memo',
        'merchant_category_code' => 'merchant_category_code',
        'merchant_guid' => 'merchant_guid',
        'merchant_location_guid' => 'merchant_location_guid',
        'metadata' => 'metadata',
        'posted_at' => 'posted_at',
        'status' => 'status',
        'transacted_at' => 'transacted_at',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'category' => 'setCategory',
        'check_number_string' => 'setCheckNumberString',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'id' => 'setId',
        'is_international' => 'setIsInternational',
        'latitude' => 'setLatitude',
        'localized_description' => 'setLocalizedDescription',
        'localized_memo' => 'setLocalizedMemo',
        'longitude' => 'setLongitude',
        'memo' => 'setMemo',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'merchant_guid' => 'setMerchantGuid',
        'merchant_location_guid' => 'setMerchantLocationGuid',
        'metadata' => 'setMetadata',
        'posted_at' => 'setPostedAt',
        'status' => 'setStatus',
        'transacted_at' => 'setTransactedAt',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'category' => 'getCategory',
        'check_number_string' => 'getCheckNumberString',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'id' => 'getId',
        'is_international' => 'getIsInternational',
        'latitude' => 'getLatitude',
        'localized_description' => 'getLocalizedDescription',
        'localized_memo' => 'getLocalizedMemo',
        'longitude' => 'getLongitude',
        'memo' => 'getMemo',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'merchant_guid' => 'getMerchantGuid',
        'merchant_location_guid' => 'getMerchantLocationGuid',
        'metadata' => 'getMetadata',
        'posted_at' => 'getPostedAt',
        'status' => 'getStatus',
        'transacted_at' => 'getTransactedAt',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('check_number_string', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_international', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('localized_description', $data ?? [], null);
        $this->setIfExists('localized_memo', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('merchant_category_code', $data ?? [], null);
        $this->setIfExists('merchant_guid', $data ?? [], null);
        $this->setIfExists('merchant_location_guid', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('posted_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transacted_at', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets check_number_string
     *
     * @return string|null
     */
    public function getCheckNumberString()
    {
        return $this->container['check_number_string'];
    }

    /**
     * Sets check_number_string
     *
     * @param string|null $check_number_string check_number_string
     *
     * @return self
     */
    public function setCheckNumberString($check_number_string)
    {
        if (is_null($check_number_string)) {
            throw new \InvalidArgumentException('non-nullable check_number_string cannot be null');
        }
        $this->container['check_number_string'] = $check_number_string;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param bool|null $is_international is_international
     *
     * @return self
     */
    public function setIsInternational($is_international)
    {
        if (is_null($is_international)) {
            throw new \InvalidArgumentException('non-nullable is_international cannot be null');
        }
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets localized_description
     *
     * @return string|null
     */
    public function getLocalizedDescription()
    {
        return $this->container['localized_description'];
    }

    /**
     * Sets localized_description
     *
     * @param string|null $localized_description localized_description
     *
     * @return self
     */
    public function setLocalizedDescription($localized_description)
    {
        if (is_null($localized_description)) {
            throw new \InvalidArgumentException('non-nullable localized_description cannot be null');
        }
        $this->container['localized_description'] = $localized_description;

        return $this;
    }

    /**
     * Gets localized_memo
     *
     * @return string|null
     */
    public function getLocalizedMemo()
    {
        return $this->container['localized_memo'];
    }

    /**
     * Sets localized_memo
     *
     * @param string|null $localized_memo localized_memo
     *
     * @return self
     */
    public function setLocalizedMemo($localized_memo)
    {
        if (is_null($localized_memo)) {
            throw new \InvalidArgumentException('non-nullable localized_memo cannot be null');
        }
        $this->container['localized_memo'] = $localized_memo;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return int|null
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param int|null $merchant_category_code merchant_category_code
     *
     * @return self
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        if (is_null($merchant_category_code)) {
            throw new \InvalidArgumentException('non-nullable merchant_category_code cannot be null');
        }
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets merchant_guid
     *
     * @return string|null
     */
    public function getMerchantGuid()
    {
        return $this->container['merchant_guid'];
    }

    /**
     * Sets merchant_guid
     *
     * @param string|null $merchant_guid merchant_guid
     *
     * @return self
     */
    public function setMerchantGuid($merchant_guid)
    {
        if (is_null($merchant_guid)) {
            throw new \InvalidArgumentException('non-nullable merchant_guid cannot be null');
        }
        $this->container['merchant_guid'] = $merchant_guid;

        return $this;
    }

    /**
     * Gets merchant_location_guid
     *
     * @return string|null
     */
    public function getMerchantLocationGuid()
    {
        return $this->container['merchant_location_guid'];
    }

    /**
     * Sets merchant_location_guid
     *
     * @param string|null $merchant_location_guid merchant_location_guid
     *
     * @return self
     */
    public function setMerchantLocationGuid($merchant_location_guid)
    {
        if (is_null($merchant_location_guid)) {
            throw new \InvalidArgumentException('non-nullable merchant_location_guid cannot be null');
        }
        $this->container['merchant_location_guid'] = $merchant_location_guid;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets posted_at
     *
     * @return string|null
     */
    public function getPostedAt()
    {
        return $this->container['posted_at'];
    }

    /**
     * Sets posted_at
     *
     * @param string|null $posted_at posted_at
     *
     * @return self
     */
    public function setPostedAt($posted_at)
    {
        if (is_null($posted_at)) {
            throw new \InvalidArgumentException('non-nullable posted_at cannot be null');
        }
        $this->container['posted_at'] = $posted_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transacted_at
     *
     * @return string|null
     */
    public function getTransactedAt()
    {
        return $this->container['transacted_at'];
    }

    /**
     * Sets transacted_at
     *
     * @param string|null $transacted_at transacted_at
     *
     * @return self
     */
    public function setTransactedAt($transacted_at)
    {
        if (is_null($transacted_at)) {
            throw new \InvalidArgumentException('non-nullable transacted_at cannot be null');
        }
        $this->container['transacted_at'] = $transacted_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


