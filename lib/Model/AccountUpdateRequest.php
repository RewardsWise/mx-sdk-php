<?php
/**
 * AccountUpdateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_subtype' => 'string',
        'account_type' => 'string',
        'apr' => 'float',
        'apy' => 'float',
        'available_balance' => 'float',
        'balance' => 'float',
        'cash_surrender_value' => 'float',
        'credit_limit' => 'float',
        'currency_code' => 'string',
        'death_benefit' => 'int',
        'interest_rate' => 'float',
        'is_business' => 'bool',
        'is_closed' => 'bool',
        'is_hidden' => 'bool',
        'loan_amount' => 'float',
        'metadata' => 'string',
        'name' => 'string',
        'nickname' => 'string',
        'original_balance' => 'float',
        'property_type' => 'string',
        'skip_webhook' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_subtype' => null,
        'account_type' => null,
        'apr' => null,
        'apy' => null,
        'available_balance' => null,
        'balance' => null,
        'cash_surrender_value' => null,
        'credit_limit' => null,
        'currency_code' => null,
        'death_benefit' => null,
        'interest_rate' => null,
        'is_business' => null,
        'is_closed' => null,
        'is_hidden' => null,
        'loan_amount' => null,
        'metadata' => null,
        'name' => null,
        'nickname' => null,
        'original_balance' => null,
        'property_type' => null,
        'skip_webhook' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_subtype' => false,
        'account_type' => false,
        'apr' => false,
        'apy' => false,
        'available_balance' => false,
        'balance' => false,
        'cash_surrender_value' => false,
        'credit_limit' => false,
        'currency_code' => false,
        'death_benefit' => false,
        'interest_rate' => false,
        'is_business' => false,
        'is_closed' => false,
        'is_hidden' => false,
        'loan_amount' => false,
        'metadata' => false,
        'name' => false,
        'nickname' => false,
        'original_balance' => false,
        'property_type' => false,
        'skip_webhook' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_subtype' => 'account_subtype',
        'account_type' => 'account_type',
        'apr' => 'apr',
        'apy' => 'apy',
        'available_balance' => 'available_balance',
        'balance' => 'balance',
        'cash_surrender_value' => 'cash_surrender_value',
        'credit_limit' => 'credit_limit',
        'currency_code' => 'currency_code',
        'death_benefit' => 'death_benefit',
        'interest_rate' => 'interest_rate',
        'is_business' => 'is_business',
        'is_closed' => 'is_closed',
        'is_hidden' => 'is_hidden',
        'loan_amount' => 'loan_amount',
        'metadata' => 'metadata',
        'name' => 'name',
        'nickname' => 'nickname',
        'original_balance' => 'original_balance',
        'property_type' => 'property_type',
        'skip_webhook' => 'skip_webhook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_subtype' => 'setAccountSubtype',
        'account_type' => 'setAccountType',
        'apr' => 'setApr',
        'apy' => 'setApy',
        'available_balance' => 'setAvailableBalance',
        'balance' => 'setBalance',
        'cash_surrender_value' => 'setCashSurrenderValue',
        'credit_limit' => 'setCreditLimit',
        'currency_code' => 'setCurrencyCode',
        'death_benefit' => 'setDeathBenefit',
        'interest_rate' => 'setInterestRate',
        'is_business' => 'setIsBusiness',
        'is_closed' => 'setIsClosed',
        'is_hidden' => 'setIsHidden',
        'loan_amount' => 'setLoanAmount',
        'metadata' => 'setMetadata',
        'name' => 'setName',
        'nickname' => 'setNickname',
        'original_balance' => 'setOriginalBalance',
        'property_type' => 'setPropertyType',
        'skip_webhook' => 'setSkipWebhook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_subtype' => 'getAccountSubtype',
        'account_type' => 'getAccountType',
        'apr' => 'getApr',
        'apy' => 'getApy',
        'available_balance' => 'getAvailableBalance',
        'balance' => 'getBalance',
        'cash_surrender_value' => 'getCashSurrenderValue',
        'credit_limit' => 'getCreditLimit',
        'currency_code' => 'getCurrencyCode',
        'death_benefit' => 'getDeathBenefit',
        'interest_rate' => 'getInterestRate',
        'is_business' => 'getIsBusiness',
        'is_closed' => 'getIsClosed',
        'is_hidden' => 'getIsHidden',
        'loan_amount' => 'getLoanAmount',
        'metadata' => 'getMetadata',
        'name' => 'getName',
        'nickname' => 'getNickname',
        'original_balance' => 'getOriginalBalance',
        'property_type' => 'getPropertyType',
        'skip_webhook' => 'getSkipWebhook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_subtype', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('apy', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('cash_surrender_value', $data ?? [], null);
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('death_benefit', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('is_business', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('loan_amount', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('original_balance', $data ?? [], null);
        $this->setIfExists('property_type', $data ?? [], null);
        $this->setIfExists('skip_webhook', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_subtype
     *
     * @return string|null
     */
    public function getAccountSubtype()
    {
        return $this->container['account_subtype'];
    }

    /**
     * Sets account_subtype
     *
     * @param string|null $account_subtype account_subtype
     *
     * @return self
     */
    public function setAccountSubtype($account_subtype)
    {
        if (is_null($account_subtype)) {
            throw new \InvalidArgumentException('non-nullable account_subtype cannot be null');
        }
        $this->container['account_subtype'] = $account_subtype;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets apr
     *
     * @return float|null
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr
     *
     * @param float|null $apr apr
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            throw new \InvalidArgumentException('non-nullable apr cannot be null');
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets apy
     *
     * @return float|null
     */
    public function getApy()
    {
        return $this->container['apy'];
    }

    /**
     * Sets apy
     *
     * @param float|null $apy apy
     *
     * @return self
     */
    public function setApy($apy)
    {
        if (is_null($apy)) {
            throw new \InvalidArgumentException('non-nullable apy cannot be null');
        }
        $this->container['apy'] = $apy;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets cash_surrender_value
     *
     * @return float|null
     */
    public function getCashSurrenderValue()
    {
        return $this->container['cash_surrender_value'];
    }

    /**
     * Sets cash_surrender_value
     *
     * @param float|null $cash_surrender_value cash_surrender_value
     *
     * @return self
     */
    public function setCashSurrenderValue($cash_surrender_value)
    {
        if (is_null($cash_surrender_value)) {
            throw new \InvalidArgumentException('non-nullable cash_surrender_value cannot be null');
        }
        $this->container['cash_surrender_value'] = $cash_surrender_value;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit credit_limit
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        if (is_null($credit_limit)) {
            throw new \InvalidArgumentException('non-nullable credit_limit cannot be null');
        }
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets death_benefit
     *
     * @return int|null
     */
    public function getDeathBenefit()
    {
        return $this->container['death_benefit'];
    }

    /**
     * Sets death_benefit
     *
     * @param int|null $death_benefit death_benefit
     *
     * @return self
     */
    public function setDeathBenefit($death_benefit)
    {
        if (is_null($death_benefit)) {
            throw new \InvalidArgumentException('non-nullable death_benefit cannot be null');
        }
        $this->container['death_benefit'] = $death_benefit;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate interest_rate
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets is_business
     *
     * @return bool|null
     */
    public function getIsBusiness()
    {
        return $this->container['is_business'];
    }

    /**
     * Sets is_business
     *
     * @param bool|null $is_business is_business
     *
     * @return self
     */
    public function setIsBusiness($is_business)
    {
        if (is_null($is_business)) {
            throw new \InvalidArgumentException('non-nullable is_business cannot be null');
        }
        $this->container['is_business'] = $is_business;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool|null $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets loan_amount
     *
     * @return float|null
     */
    public function getLoanAmount()
    {
        return $this->container['loan_amount'];
    }

    /**
     * Sets loan_amount
     *
     * @param float|null $loan_amount loan_amount
     *
     * @return self
     */
    public function setLoanAmount($loan_amount)
    {
        if (is_null($loan_amount)) {
            throw new \InvalidArgumentException('non-nullable loan_amount cannot be null');
        }
        $this->container['loan_amount'] = $loan_amount;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets original_balance
     *
     * @return float|null
     */
    public function getOriginalBalance()
    {
        return $this->container['original_balance'];
    }

    /**
     * Sets original_balance
     *
     * @param float|null $original_balance original_balance
     *
     * @return self
     */
    public function setOriginalBalance($original_balance)
    {
        if (is_null($original_balance)) {
            throw new \InvalidArgumentException('non-nullable original_balance cannot be null');
        }
        $this->container['original_balance'] = $original_balance;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string|null
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string|null $property_type property_type
     *
     * @return self
     */
    public function setPropertyType($property_type)
    {
        if (is_null($property_type)) {
            throw new \InvalidArgumentException('non-nullable property_type cannot be null');
        }
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets skip_webhook
     *
     * @return bool|null
     */
    public function getSkipWebhook()
    {
        return $this->container['skip_webhook'];
    }

    /**
     * Sets skip_webhook
     *
     * @param bool|null $skip_webhook skip_webhook
     *
     * @return self
     */
    public function setSkipWebhook($skip_webhook)
    {
        if (is_null($skip_webhook)) {
            throw new \InvalidArgumentException('non-nullable skip_webhook cannot be null');
        }
        $this->container['skip_webhook'] = $skip_webhook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


