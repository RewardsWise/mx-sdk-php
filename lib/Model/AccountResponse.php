<?php
/**
 * AccountResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'string',
        'account_ownership' => 'string',
        'annuity_policy_to_date' => 'string',
        'annuity_provider' => 'string',
        'annuity_term_year' => 'float',
        'apr' => 'float',
        'apy' => 'float',
        'available_balance' => 'float',
        'available_credit' => 'float',
        'balance' => 'float',
        'cash_balance' => 'float',
        'cash_surrender_value' => 'float',
        'created_at' => 'string',
        'credit_limit' => 'float',
        'currency_code' => 'string',
        'day_payment_is_due' => 'int',
        'death_benefit' => 'int',
        'federal_insurance_status' => 'string',
        'guid' => 'string',
        'holdings_value' => 'float',
        'id' => 'string',
        'imported_at' => 'string',
        'institution_code' => 'string',
        'insured_name' => 'string',
        'interest_rate' => 'float',
        'is_closed' => 'bool',
        'is_hidden' => 'bool',
        'is_manual' => 'bool',
        'last_payment' => 'float',
        'last_payment_at' => 'string',
        'loan_amount' => 'float',
        'margin_balance' => 'float',
        'matures_on' => 'string',
        'member_guid' => 'string',
        'member_id' => 'string',
        'member_is_managed_by_user' => 'bool',
        'metadata' => 'string',
        'minimum_balance' => 'float',
        'minimum_payment' => 'float',
        'name' => 'string',
        'nickname' => 'string',
        'original_balance' => 'float',
        'pay_out_amount' => 'float',
        'payment_due_at' => 'string',
        'payoff_balance' => 'float',
        'premium_amount' => 'float',
        'property_type' => 'string',
        'routing_number' => 'string',
        'started_on' => 'string',
        'statement_balance' => 'float',
        'subtype' => 'string',
        'today_ugl_amount' => 'float',
        'today_ugl_percentage' => 'float',
        'total_account_value' => 'float',
        'total_account_value_ugl' => 'float',
        'type' => 'string',
        'updated_at' => 'string',
        'user_guid' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'account_ownership' => null,
        'annuity_policy_to_date' => null,
        'annuity_provider' => null,
        'annuity_term_year' => null,
        'apr' => null,
        'apy' => null,
        'available_balance' => null,
        'available_credit' => null,
        'balance' => null,
        'cash_balance' => null,
        'cash_surrender_value' => null,
        'created_at' => null,
        'credit_limit' => null,
        'currency_code' => null,
        'day_payment_is_due' => null,
        'death_benefit' => null,
        'federal_insurance_status' => null,
        'guid' => null,
        'holdings_value' => null,
        'id' => null,
        'imported_at' => null,
        'institution_code' => null,
        'insured_name' => null,
        'interest_rate' => null,
        'is_closed' => null,
        'is_hidden' => null,
        'is_manual' => null,
        'last_payment' => null,
        'last_payment_at' => null,
        'loan_amount' => null,
        'margin_balance' => null,
        'matures_on' => null,
        'member_guid' => null,
        'member_id' => null,
        'member_is_managed_by_user' => null,
        'metadata' => null,
        'minimum_balance' => null,
        'minimum_payment' => null,
        'name' => null,
        'nickname' => null,
        'original_balance' => null,
        'pay_out_amount' => null,
        'payment_due_at' => null,
        'payoff_balance' => null,
        'premium_amount' => null,
        'property_type' => null,
        'routing_number' => null,
        'started_on' => null,
        'statement_balance' => null,
        'subtype' => null,
        'today_ugl_amount' => null,
        'today_ugl_percentage' => null,
        'total_account_value' => null,
        'total_account_value_ugl' => null,
        'type' => null,
        'updated_at' => null,
        'user_guid' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_number' => true,
        'account_ownership' => true,
        'annuity_policy_to_date' => true,
        'annuity_provider' => true,
        'annuity_term_year' => true,
        'apr' => true,
        'apy' => true,
        'available_balance' => true,
        'available_credit' => true,
        'balance' => true,
        'cash_balance' => true,
        'cash_surrender_value' => true,
        'created_at' => false,
        'credit_limit' => true,
        'currency_code' => true,
        'day_payment_is_due' => true,
        'death_benefit' => true,
        'federal_insurance_status' => true,
        'guid' => true,
        'holdings_value' => true,
        'id' => true,
        'imported_at' => true,
        'institution_code' => true,
        'insured_name' => true,
        'interest_rate' => true,
        'is_closed' => true,
        'is_hidden' => true,
        'is_manual' => true,
        'last_payment' => true,
        'last_payment_at' => true,
        'loan_amount' => true,
        'margin_balance' => true,
        'matures_on' => true,
        'member_guid' => true,
        'member_id' => true,
        'member_is_managed_by_user' => true,
        'metadata' => true,
        'minimum_balance' => true,
        'minimum_payment' => true,
        'name' => true,
        'nickname' => true,
        'original_balance' => true,
        'pay_out_amount' => true,
        'payment_due_at' => true,
        'payoff_balance' => true,
        'premium_amount' => true,
        'property_type' => true,
        'routing_number' => true,
        'started_on' => true,
        'statement_balance' => true,
        'subtype' => true,
        'today_ugl_amount' => true,
        'today_ugl_percentage' => true,
        'total_account_value' => true,
        'total_account_value_ugl' => true,
        'type' => true,
        'updated_at' => true,
        'user_guid' => true,
        'user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'account_number',
        'account_ownership' => 'account_ownership',
        'annuity_policy_to_date' => 'annuity_policy_to_date',
        'annuity_provider' => 'annuity_provider',
        'annuity_term_year' => 'annuity_term_year',
        'apr' => 'apr',
        'apy' => 'apy',
        'available_balance' => 'available_balance',
        'available_credit' => 'available_credit',
        'balance' => 'balance',
        'cash_balance' => 'cash_balance',
        'cash_surrender_value' => 'cash_surrender_value',
        'created_at' => 'created_at',
        'credit_limit' => 'credit_limit',
        'currency_code' => 'currency_code',
        'day_payment_is_due' => 'day_payment_is_due',
        'death_benefit' => 'death_benefit',
        'federal_insurance_status' => 'federal_insurance_status',
        'guid' => 'guid',
        'holdings_value' => 'holdings_value',
        'id' => 'id',
        'imported_at' => 'imported_at',
        'institution_code' => 'institution_code',
        'insured_name' => 'insured_name',
        'interest_rate' => 'interest_rate',
        'is_closed' => 'is_closed',
        'is_hidden' => 'is_hidden',
        'is_manual' => 'is_manual',
        'last_payment' => 'last_payment',
        'last_payment_at' => 'last_payment_at',
        'loan_amount' => 'loan_amount',
        'margin_balance' => 'margin_balance',
        'matures_on' => 'matures_on',
        'member_guid' => 'member_guid',
        'member_id' => 'member_id',
        'member_is_managed_by_user' => 'member_is_managed_by_user',
        'metadata' => 'metadata',
        'minimum_balance' => 'minimum_balance',
        'minimum_payment' => 'minimum_payment',
        'name' => 'name',
        'nickname' => 'nickname',
        'original_balance' => 'original_balance',
        'pay_out_amount' => 'pay_out_amount',
        'payment_due_at' => 'payment_due_at',
        'payoff_balance' => 'payoff_balance',
        'premium_amount' => 'premium_amount',
        'property_type' => 'property_type',
        'routing_number' => 'routing_number',
        'started_on' => 'started_on',
        'statement_balance' => 'statement_balance',
        'subtype' => 'subtype',
        'today_ugl_amount' => 'today_ugl_amount',
        'today_ugl_percentage' => 'today_ugl_percentage',
        'total_account_value' => 'total_account_value',
        'total_account_value_ugl' => 'total_account_value_ugl',
        'type' => 'type',
        'updated_at' => 'updated_at',
        'user_guid' => 'user_guid',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'account_ownership' => 'setAccountOwnership',
        'annuity_policy_to_date' => 'setAnnuityPolicyToDate',
        'annuity_provider' => 'setAnnuityProvider',
        'annuity_term_year' => 'setAnnuityTermYear',
        'apr' => 'setApr',
        'apy' => 'setApy',
        'available_balance' => 'setAvailableBalance',
        'available_credit' => 'setAvailableCredit',
        'balance' => 'setBalance',
        'cash_balance' => 'setCashBalance',
        'cash_surrender_value' => 'setCashSurrenderValue',
        'created_at' => 'setCreatedAt',
        'credit_limit' => 'setCreditLimit',
        'currency_code' => 'setCurrencyCode',
        'day_payment_is_due' => 'setDayPaymentIsDue',
        'death_benefit' => 'setDeathBenefit',
        'federal_insurance_status' => 'setFederalInsuranceStatus',
        'guid' => 'setGuid',
        'holdings_value' => 'setHoldingsValue',
        'id' => 'setId',
        'imported_at' => 'setImportedAt',
        'institution_code' => 'setInstitutionCode',
        'insured_name' => 'setInsuredName',
        'interest_rate' => 'setInterestRate',
        'is_closed' => 'setIsClosed',
        'is_hidden' => 'setIsHidden',
        'is_manual' => 'setIsManual',
        'last_payment' => 'setLastPayment',
        'last_payment_at' => 'setLastPaymentAt',
        'loan_amount' => 'setLoanAmount',
        'margin_balance' => 'setMarginBalance',
        'matures_on' => 'setMaturesOn',
        'member_guid' => 'setMemberGuid',
        'member_id' => 'setMemberId',
        'member_is_managed_by_user' => 'setMemberIsManagedByUser',
        'metadata' => 'setMetadata',
        'minimum_balance' => 'setMinimumBalance',
        'minimum_payment' => 'setMinimumPayment',
        'name' => 'setName',
        'nickname' => 'setNickname',
        'original_balance' => 'setOriginalBalance',
        'pay_out_amount' => 'setPayOutAmount',
        'payment_due_at' => 'setPaymentDueAt',
        'payoff_balance' => 'setPayoffBalance',
        'premium_amount' => 'setPremiumAmount',
        'property_type' => 'setPropertyType',
        'routing_number' => 'setRoutingNumber',
        'started_on' => 'setStartedOn',
        'statement_balance' => 'setStatementBalance',
        'subtype' => 'setSubtype',
        'today_ugl_amount' => 'setTodayUglAmount',
        'today_ugl_percentage' => 'setTodayUglPercentage',
        'total_account_value' => 'setTotalAccountValue',
        'total_account_value_ugl' => 'setTotalAccountValueUgl',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'user_guid' => 'setUserGuid',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'account_ownership' => 'getAccountOwnership',
        'annuity_policy_to_date' => 'getAnnuityPolicyToDate',
        'annuity_provider' => 'getAnnuityProvider',
        'annuity_term_year' => 'getAnnuityTermYear',
        'apr' => 'getApr',
        'apy' => 'getApy',
        'available_balance' => 'getAvailableBalance',
        'available_credit' => 'getAvailableCredit',
        'balance' => 'getBalance',
        'cash_balance' => 'getCashBalance',
        'cash_surrender_value' => 'getCashSurrenderValue',
        'created_at' => 'getCreatedAt',
        'credit_limit' => 'getCreditLimit',
        'currency_code' => 'getCurrencyCode',
        'day_payment_is_due' => 'getDayPaymentIsDue',
        'death_benefit' => 'getDeathBenefit',
        'federal_insurance_status' => 'getFederalInsuranceStatus',
        'guid' => 'getGuid',
        'holdings_value' => 'getHoldingsValue',
        'id' => 'getId',
        'imported_at' => 'getImportedAt',
        'institution_code' => 'getInstitutionCode',
        'insured_name' => 'getInsuredName',
        'interest_rate' => 'getInterestRate',
        'is_closed' => 'getIsClosed',
        'is_hidden' => 'getIsHidden',
        'is_manual' => 'getIsManual',
        'last_payment' => 'getLastPayment',
        'last_payment_at' => 'getLastPaymentAt',
        'loan_amount' => 'getLoanAmount',
        'margin_balance' => 'getMarginBalance',
        'matures_on' => 'getMaturesOn',
        'member_guid' => 'getMemberGuid',
        'member_id' => 'getMemberId',
        'member_is_managed_by_user' => 'getMemberIsManagedByUser',
        'metadata' => 'getMetadata',
        'minimum_balance' => 'getMinimumBalance',
        'minimum_payment' => 'getMinimumPayment',
        'name' => 'getName',
        'nickname' => 'getNickname',
        'original_balance' => 'getOriginalBalance',
        'pay_out_amount' => 'getPayOutAmount',
        'payment_due_at' => 'getPaymentDueAt',
        'payoff_balance' => 'getPayoffBalance',
        'premium_amount' => 'getPremiumAmount',
        'property_type' => 'getPropertyType',
        'routing_number' => 'getRoutingNumber',
        'started_on' => 'getStartedOn',
        'statement_balance' => 'getStatementBalance',
        'subtype' => 'getSubtype',
        'today_ugl_amount' => 'getTodayUglAmount',
        'today_ugl_percentage' => 'getTodayUglPercentage',
        'total_account_value' => 'getTotalAccountValue',
        'total_account_value_ugl' => 'getTotalAccountValueUgl',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'user_guid' => 'getUserGuid',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_ownership', $data ?? [], null);
        $this->setIfExists('annuity_policy_to_date', $data ?? [], null);
        $this->setIfExists('annuity_provider', $data ?? [], null);
        $this->setIfExists('annuity_term_year', $data ?? [], null);
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('apy', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('available_credit', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('cash_balance', $data ?? [], null);
        $this->setIfExists('cash_surrender_value', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('day_payment_is_due', $data ?? [], null);
        $this->setIfExists('death_benefit', $data ?? [], null);
        $this->setIfExists('federal_insurance_status', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('holdings_value', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('imported_at', $data ?? [], null);
        $this->setIfExists('institution_code', $data ?? [], null);
        $this->setIfExists('insured_name', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_manual', $data ?? [], null);
        $this->setIfExists('last_payment', $data ?? [], null);
        $this->setIfExists('last_payment_at', $data ?? [], null);
        $this->setIfExists('loan_amount', $data ?? [], null);
        $this->setIfExists('margin_balance', $data ?? [], null);
        $this->setIfExists('matures_on', $data ?? [], null);
        $this->setIfExists('member_guid', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('member_is_managed_by_user', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('minimum_balance', $data ?? [], null);
        $this->setIfExists('minimum_payment', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('original_balance', $data ?? [], null);
        $this->setIfExists('pay_out_amount', $data ?? [], null);
        $this->setIfExists('payment_due_at', $data ?? [], null);
        $this->setIfExists('payoff_balance', $data ?? [], null);
        $this->setIfExists('premium_amount', $data ?? [], null);
        $this->setIfExists('property_type', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('started_on', $data ?? [], null);
        $this->setIfExists('statement_balance', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('today_ugl_amount', $data ?? [], null);
        $this->setIfExists('today_ugl_percentage', $data ?? [], null);
        $this->setIfExists('total_account_value', $data ?? [], null);
        $this->setIfExists('total_account_value_ugl', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_ownership
     *
     * @return string|null
     */
    public function getAccountOwnership()
    {
        return $this->container['account_ownership'];
    }

    /**
     * Sets account_ownership
     *
     * @param string|null $account_ownership account_ownership
     *
     * @return self
     */
    public function setAccountOwnership($account_ownership)
    {
        if (is_null($account_ownership)) {
            array_push($this->openAPINullablesSetToNull, 'account_ownership');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_ownership', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_ownership'] = $account_ownership;

        return $this;
    }

    /**
     * Gets annuity_policy_to_date
     *
     * @return string|null
     */
    public function getAnnuityPolicyToDate()
    {
        return $this->container['annuity_policy_to_date'];
    }

    /**
     * Sets annuity_policy_to_date
     *
     * @param string|null $annuity_policy_to_date annuity_policy_to_date
     *
     * @return self
     */
    public function setAnnuityPolicyToDate($annuity_policy_to_date)
    {
        if (is_null($annuity_policy_to_date)) {
            array_push($this->openAPINullablesSetToNull, 'annuity_policy_to_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annuity_policy_to_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annuity_policy_to_date'] = $annuity_policy_to_date;

        return $this;
    }

    /**
     * Gets annuity_provider
     *
     * @return string|null
     */
    public function getAnnuityProvider()
    {
        return $this->container['annuity_provider'];
    }

    /**
     * Sets annuity_provider
     *
     * @param string|null $annuity_provider annuity_provider
     *
     * @return self
     */
    public function setAnnuityProvider($annuity_provider)
    {
        if (is_null($annuity_provider)) {
            array_push($this->openAPINullablesSetToNull, 'annuity_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annuity_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annuity_provider'] = $annuity_provider;

        return $this;
    }

    /**
     * Gets annuity_term_year
     *
     * @return float|null
     */
    public function getAnnuityTermYear()
    {
        return $this->container['annuity_term_year'];
    }

    /**
     * Sets annuity_term_year
     *
     * @param float|null $annuity_term_year annuity_term_year
     *
     * @return self
     */
    public function setAnnuityTermYear($annuity_term_year)
    {
        if (is_null($annuity_term_year)) {
            array_push($this->openAPINullablesSetToNull, 'annuity_term_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annuity_term_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annuity_term_year'] = $annuity_term_year;

        return $this;
    }

    /**
     * Gets apr
     *
     * @return float|null
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr
     *
     * @param float|null $apr apr
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            array_push($this->openAPINullablesSetToNull, 'apr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets apy
     *
     * @return float|null
     */
    public function getApy()
    {
        return $this->container['apy'];
    }

    /**
     * Sets apy
     *
     * @param float|null $apy apy
     *
     * @return self
     */
    public function setApy($apy)
    {
        if (is_null($apy)) {
            array_push($this->openAPINullablesSetToNull, 'apy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apy'] = $apy;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            array_push($this->openAPINullablesSetToNull, 'available_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets available_credit
     *
     * @return float|null
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     *
     * @param float|null $available_credit available_credit
     *
     * @return self
     */
    public function setAvailableCredit($available_credit)
    {
        if (is_null($available_credit)) {
            array_push($this->openAPINullablesSetToNull, 'available_credit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_credit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            array_push($this->openAPINullablesSetToNull, 'balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets cash_balance
     *
     * @return float|null
     */
    public function getCashBalance()
    {
        return $this->container['cash_balance'];
    }

    /**
     * Sets cash_balance
     *
     * @param float|null $cash_balance cash_balance
     *
     * @return self
     */
    public function setCashBalance($cash_balance)
    {
        if (is_null($cash_balance)) {
            array_push($this->openAPINullablesSetToNull, 'cash_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_balance'] = $cash_balance;

        return $this;
    }

    /**
     * Gets cash_surrender_value
     *
     * @return float|null
     */
    public function getCashSurrenderValue()
    {
        return $this->container['cash_surrender_value'];
    }

    /**
     * Sets cash_surrender_value
     *
     * @param float|null $cash_surrender_value cash_surrender_value
     *
     * @return self
     */
    public function setCashSurrenderValue($cash_surrender_value)
    {
        if (is_null($cash_surrender_value)) {
            array_push($this->openAPINullablesSetToNull, 'cash_surrender_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_surrender_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_surrender_value'] = $cash_surrender_value;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit credit_limit
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        if (is_null($credit_limit)) {
            array_push($this->openAPINullablesSetToNull, 'credit_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets day_payment_is_due
     *
     * @return int|null
     */
    public function getDayPaymentIsDue()
    {
        return $this->container['day_payment_is_due'];
    }

    /**
     * Sets day_payment_is_due
     *
     * @param int|null $day_payment_is_due day_payment_is_due
     *
     * @return self
     */
    public function setDayPaymentIsDue($day_payment_is_due)
    {
        if (is_null($day_payment_is_due)) {
            array_push($this->openAPINullablesSetToNull, 'day_payment_is_due');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('day_payment_is_due', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['day_payment_is_due'] = $day_payment_is_due;

        return $this;
    }

    /**
     * Gets death_benefit
     *
     * @return int|null
     */
    public function getDeathBenefit()
    {
        return $this->container['death_benefit'];
    }

    /**
     * Sets death_benefit
     *
     * @param int|null $death_benefit death_benefit
     *
     * @return self
     */
    public function setDeathBenefit($death_benefit)
    {
        if (is_null($death_benefit)) {
            array_push($this->openAPINullablesSetToNull, 'death_benefit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('death_benefit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['death_benefit'] = $death_benefit;

        return $this;
    }

    /**
     * Gets federal_insurance_status
     *
     * @return string|null
     */
    public function getFederalInsuranceStatus()
    {
        return $this->container['federal_insurance_status'];
    }

    /**
     * Sets federal_insurance_status
     *
     * @param string|null $federal_insurance_status federal_insurance_status
     *
     * @return self
     */
    public function setFederalInsuranceStatus($federal_insurance_status)
    {
        if (is_null($federal_insurance_status)) {
            array_push($this->openAPINullablesSetToNull, 'federal_insurance_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_insurance_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_insurance_status'] = $federal_insurance_status;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets holdings_value
     *
     * @return float|null
     */
    public function getHoldingsValue()
    {
        return $this->container['holdings_value'];
    }

    /**
     * Sets holdings_value
     *
     * @param float|null $holdings_value holdings_value
     *
     * @return self
     */
    public function setHoldingsValue($holdings_value)
    {
        if (is_null($holdings_value)) {
            array_push($this->openAPINullablesSetToNull, 'holdings_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holdings_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holdings_value'] = $holdings_value;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imported_at
     *
     * @return string|null
     */
    public function getImportedAt()
    {
        return $this->container['imported_at'];
    }

    /**
     * Sets imported_at
     *
     * @param string|null $imported_at imported_at
     *
     * @return self
     */
    public function setImportedAt($imported_at)
    {
        if (is_null($imported_at)) {
            array_push($this->openAPINullablesSetToNull, 'imported_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('imported_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['imported_at'] = $imported_at;

        return $this;
    }

    /**
     * Gets institution_code
     *
     * @return string|null
     */
    public function getInstitutionCode()
    {
        return $this->container['institution_code'];
    }

    /**
     * Sets institution_code
     *
     * @param string|null $institution_code institution_code
     *
     * @return self
     */
    public function setInstitutionCode($institution_code)
    {
        if (is_null($institution_code)) {
            array_push($this->openAPINullablesSetToNull, 'institution_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('institution_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['institution_code'] = $institution_code;

        return $this;
    }

    /**
     * Gets insured_name
     *
     * @return string|null
     */
    public function getInsuredName()
    {
        return $this->container['insured_name'];
    }

    /**
     * Sets insured_name
     *
     * @param string|null $insured_name insured_name
     *
     * @return self
     */
    public function setInsuredName($insured_name)
    {
        if (is_null($insured_name)) {
            array_push($this->openAPINullablesSetToNull, 'insured_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insured_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insured_name'] = $insured_name;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate interest_rate
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            array_push($this->openAPINullablesSetToNull, 'interest_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool|null $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            array_push($this->openAPINullablesSetToNull, 'is_closed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_closed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            array_push($this->openAPINullablesSetToNull, 'is_hidden');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_hidden', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual is_manual
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        if (is_null($is_manual)) {
            array_push($this->openAPINullablesSetToNull, 'is_manual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_manual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets last_payment
     *
     * @return float|null
     */
    public function getLastPayment()
    {
        return $this->container['last_payment'];
    }

    /**
     * Sets last_payment
     *
     * @param float|null $last_payment last_payment
     *
     * @return self
     */
    public function setLastPayment($last_payment)
    {
        if (is_null($last_payment)) {
            array_push($this->openAPINullablesSetToNull, 'last_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_payment'] = $last_payment;

        return $this;
    }

    /**
     * Gets last_payment_at
     *
     * @return string|null
     */
    public function getLastPaymentAt()
    {
        return $this->container['last_payment_at'];
    }

    /**
     * Sets last_payment_at
     *
     * @param string|null $last_payment_at last_payment_at
     *
     * @return self
     */
    public function setLastPaymentAt($last_payment_at)
    {
        if (is_null($last_payment_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_payment_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_payment_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_payment_at'] = $last_payment_at;

        return $this;
    }

    /**
     * Gets loan_amount
     *
     * @return float|null
     */
    public function getLoanAmount()
    {
        return $this->container['loan_amount'];
    }

    /**
     * Sets loan_amount
     *
     * @param float|null $loan_amount loan_amount
     *
     * @return self
     */
    public function setLoanAmount($loan_amount)
    {
        if (is_null($loan_amount)) {
            array_push($this->openAPINullablesSetToNull, 'loan_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loan_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loan_amount'] = $loan_amount;

        return $this;
    }

    /**
     * Gets margin_balance
     *
     * @return float|null
     */
    public function getMarginBalance()
    {
        return $this->container['margin_balance'];
    }

    /**
     * Sets margin_balance
     *
     * @param float|null $margin_balance margin_balance
     *
     * @return self
     */
    public function setMarginBalance($margin_balance)
    {
        if (is_null($margin_balance)) {
            array_push($this->openAPINullablesSetToNull, 'margin_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('margin_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['margin_balance'] = $margin_balance;

        return $this;
    }

    /**
     * Gets matures_on
     *
     * @return string|null
     */
    public function getMaturesOn()
    {
        return $this->container['matures_on'];
    }

    /**
     * Sets matures_on
     *
     * @param string|null $matures_on matures_on
     *
     * @return self
     */
    public function setMaturesOn($matures_on)
    {
        if (is_null($matures_on)) {
            array_push($this->openAPINullablesSetToNull, 'matures_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matures_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matures_on'] = $matures_on;

        return $this;
    }

    /**
     * Gets member_guid
     *
     * @return string|null
     */
    public function getMemberGuid()
    {
        return $this->container['member_guid'];
    }

    /**
     * Sets member_guid
     *
     * @param string|null $member_guid member_guid
     *
     * @return self
     */
    public function setMemberGuid($member_guid)
    {
        if (is_null($member_guid)) {
            array_push($this->openAPINullablesSetToNull, 'member_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_guid'] = $member_guid;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string|null $member_id member_id
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            array_push($this->openAPINullablesSetToNull, 'member_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_is_managed_by_user
     *
     * @return bool|null
     */
    public function getMemberIsManagedByUser()
    {
        return $this->container['member_is_managed_by_user'];
    }

    /**
     * Sets member_is_managed_by_user
     *
     * @param bool|null $member_is_managed_by_user member_is_managed_by_user
     *
     * @return self
     */
    public function setMemberIsManagedByUser($member_is_managed_by_user)
    {
        if (is_null($member_is_managed_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'member_is_managed_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_is_managed_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_is_managed_by_user'] = $member_is_managed_by_user;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets minimum_balance
     *
     * @return float|null
     */
    public function getMinimumBalance()
    {
        return $this->container['minimum_balance'];
    }

    /**
     * Sets minimum_balance
     *
     * @param float|null $minimum_balance minimum_balance
     *
     * @return self
     */
    public function setMinimumBalance($minimum_balance)
    {
        if (is_null($minimum_balance)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimum_balance'] = $minimum_balance;

        return $this;
    }

    /**
     * Gets minimum_payment
     *
     * @return float|null
     */
    public function getMinimumPayment()
    {
        return $this->container['minimum_payment'];
    }

    /**
     * Sets minimum_payment
     *
     * @param float|null $minimum_payment minimum_payment
     *
     * @return self
     */
    public function setMinimumPayment($minimum_payment)
    {
        if (is_null($minimum_payment)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimum_payment'] = $minimum_payment;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            array_push($this->openAPINullablesSetToNull, 'nickname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets original_balance
     *
     * @return float|null
     */
    public function getOriginalBalance()
    {
        return $this->container['original_balance'];
    }

    /**
     * Sets original_balance
     *
     * @param float|null $original_balance original_balance
     *
     * @return self
     */
    public function setOriginalBalance($original_balance)
    {
        if (is_null($original_balance)) {
            array_push($this->openAPINullablesSetToNull, 'original_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_balance'] = $original_balance;

        return $this;
    }

    /**
     * Gets pay_out_amount
     *
     * @return float|null
     */
    public function getPayOutAmount()
    {
        return $this->container['pay_out_amount'];
    }

    /**
     * Sets pay_out_amount
     *
     * @param float|null $pay_out_amount pay_out_amount
     *
     * @return self
     */
    public function setPayOutAmount($pay_out_amount)
    {
        if (is_null($pay_out_amount)) {
            array_push($this->openAPINullablesSetToNull, 'pay_out_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_out_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_out_amount'] = $pay_out_amount;

        return $this;
    }

    /**
     * Gets payment_due_at
     *
     * @return string|null
     */
    public function getPaymentDueAt()
    {
        return $this->container['payment_due_at'];
    }

    /**
     * Sets payment_due_at
     *
     * @param string|null $payment_due_at payment_due_at
     *
     * @return self
     */
    public function setPaymentDueAt($payment_due_at)
    {
        if (is_null($payment_due_at)) {
            array_push($this->openAPINullablesSetToNull, 'payment_due_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_due_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_due_at'] = $payment_due_at;

        return $this;
    }

    /**
     * Gets payoff_balance
     *
     * @return float|null
     */
    public function getPayoffBalance()
    {
        return $this->container['payoff_balance'];
    }

    /**
     * Sets payoff_balance
     *
     * @param float|null $payoff_balance payoff_balance
     *
     * @return self
     */
    public function setPayoffBalance($payoff_balance)
    {
        if (is_null($payoff_balance)) {
            array_push($this->openAPINullablesSetToNull, 'payoff_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payoff_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payoff_balance'] = $payoff_balance;

        return $this;
    }

    /**
     * Gets premium_amount
     *
     * @return float|null
     */
    public function getPremiumAmount()
    {
        return $this->container['premium_amount'];
    }

    /**
     * Sets premium_amount
     *
     * @param float|null $premium_amount premium_amount
     *
     * @return self
     */
    public function setPremiumAmount($premium_amount)
    {
        if (is_null($premium_amount)) {
            array_push($this->openAPINullablesSetToNull, 'premium_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premium_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premium_amount'] = $premium_amount;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string|null
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string|null $property_type property_type
     *
     * @return self
     */
    public function setPropertyType($property_type)
    {
        if (is_null($property_type)) {
            array_push($this->openAPINullablesSetToNull, 'property_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number routing_number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            array_push($this->openAPINullablesSetToNull, 'routing_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('routing_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets started_on
     *
     * @return string|null
     */
    public function getStartedOn()
    {
        return $this->container['started_on'];
    }

    /**
     * Sets started_on
     *
     * @param string|null $started_on started_on
     *
     * @return self
     */
    public function setStartedOn($started_on)
    {
        if (is_null($started_on)) {
            array_push($this->openAPINullablesSetToNull, 'started_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('started_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['started_on'] = $started_on;

        return $this;
    }

    /**
     * Gets statement_balance
     *
     * @return float|null
     */
    public function getStatementBalance()
    {
        return $this->container['statement_balance'];
    }

    /**
     * Sets statement_balance
     *
     * @param float|null $statement_balance statement_balance
     *
     * @return self
     */
    public function setStatementBalance($statement_balance)
    {
        if (is_null($statement_balance)) {
            array_push($this->openAPINullablesSetToNull, 'statement_balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statement_balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statement_balance'] = $statement_balance;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            array_push($this->openAPINullablesSetToNull, 'subtype');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtype', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets today_ugl_amount
     *
     * @return float|null
     */
    public function getTodayUglAmount()
    {
        return $this->container['today_ugl_amount'];
    }

    /**
     * Sets today_ugl_amount
     *
     * @param float|null $today_ugl_amount today_ugl_amount
     *
     * @return self
     */
    public function setTodayUglAmount($today_ugl_amount)
    {
        if (is_null($today_ugl_amount)) {
            array_push($this->openAPINullablesSetToNull, 'today_ugl_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('today_ugl_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['today_ugl_amount'] = $today_ugl_amount;

        return $this;
    }

    /**
     * Gets today_ugl_percentage
     *
     * @return float|null
     */
    public function getTodayUglPercentage()
    {
        return $this->container['today_ugl_percentage'];
    }

    /**
     * Sets today_ugl_percentage
     *
     * @param float|null $today_ugl_percentage today_ugl_percentage
     *
     * @return self
     */
    public function setTodayUglPercentage($today_ugl_percentage)
    {
        if (is_null($today_ugl_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'today_ugl_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('today_ugl_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['today_ugl_percentage'] = $today_ugl_percentage;

        return $this;
    }

    /**
     * Gets total_account_value
     *
     * @return float|null
     */
    public function getTotalAccountValue()
    {
        return $this->container['total_account_value'];
    }

    /**
     * Sets total_account_value
     *
     * @param float|null $total_account_value total_account_value
     *
     * @return self
     */
    public function setTotalAccountValue($total_account_value)
    {
        if (is_null($total_account_value)) {
            array_push($this->openAPINullablesSetToNull, 'total_account_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_account_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_account_value'] = $total_account_value;

        return $this;
    }

    /**
     * Gets total_account_value_ugl
     *
     * @return float|null
     */
    public function getTotalAccountValueUgl()
    {
        return $this->container['total_account_value_ugl'];
    }

    /**
     * Sets total_account_value_ugl
     *
     * @param float|null $total_account_value_ugl total_account_value_ugl
     *
     * @return self
     */
    public function setTotalAccountValueUgl($total_account_value_ugl)
    {
        if (is_null($total_account_value_ugl)) {
            array_push($this->openAPINullablesSetToNull, 'total_account_value_ugl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_account_value_ugl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_account_value_ugl'] = $total_account_value_ugl;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid user_guid
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            array_push($this->openAPINullablesSetToNull, 'user_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


