<?php
/**
 * BudgetResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BudgetResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BudgetResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BudgetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'category_guid' => 'string',
        'created_at' => 'string',
        'guid' => 'string',
        'is_exceeded' => 'bool',
        'is_off_track' => 'bool',
        'metadata' => 'string',
        'name' => 'string',
        'off_track_percentage' => 'float',
        'parent_guid' => 'string',
        'percent_spent' => 'float',
        'projected_spending' => 'float',
        'revision' => 'int',
        'transaction_total' => 'mixed',
        'updated_at' => 'mixed',
        'user_guid' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'category_guid' => null,
        'created_at' => null,
        'guid' => null,
        'is_exceeded' => null,
        'is_off_track' => null,
        'metadata' => null,
        'name' => null,
        'off_track_percentage' => null,
        'parent_guid' => null,
        'percent_spent' => null,
        'projected_spending' => null,
        'revision' => null,
        'transaction_total' => null,
        'updated_at' => null,
        'user_guid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'category_guid' => false,
        'created_at' => false,
        'guid' => false,
        'is_exceeded' => false,
        'is_off_track' => false,
        'metadata' => true,
        'name' => true,
        'off_track_percentage' => true,
        'parent_guid' => true,
        'percent_spent' => true,
        'projected_spending' => false,
        'revision' => false,
        'transaction_total' => true,
        'updated_at' => true,
        'user_guid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'category_guid' => 'category_guid',
        'created_at' => 'created_at',
        'guid' => 'guid',
        'is_exceeded' => 'is_exceeded',
        'is_off_track' => 'is_off_track',
        'metadata' => 'metadata',
        'name' => 'name',
        'off_track_percentage' => 'off_track_percentage',
        'parent_guid' => 'parent_guid',
        'percent_spent' => 'percent_spent',
        'projected_spending' => 'projected_spending',
        'revision' => 'revision',
        'transaction_total' => 'transaction_total',
        'updated_at' => 'updated_at',
        'user_guid' => 'user_guid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'category_guid' => 'setCategoryGuid',
        'created_at' => 'setCreatedAt',
        'guid' => 'setGuid',
        'is_exceeded' => 'setIsExceeded',
        'is_off_track' => 'setIsOffTrack',
        'metadata' => 'setMetadata',
        'name' => 'setName',
        'off_track_percentage' => 'setOffTrackPercentage',
        'parent_guid' => 'setParentGuid',
        'percent_spent' => 'setPercentSpent',
        'projected_spending' => 'setProjectedSpending',
        'revision' => 'setRevision',
        'transaction_total' => 'setTransactionTotal',
        'updated_at' => 'setUpdatedAt',
        'user_guid' => 'setUserGuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'category_guid' => 'getCategoryGuid',
        'created_at' => 'getCreatedAt',
        'guid' => 'getGuid',
        'is_exceeded' => 'getIsExceeded',
        'is_off_track' => 'getIsOffTrack',
        'metadata' => 'getMetadata',
        'name' => 'getName',
        'off_track_percentage' => 'getOffTrackPercentage',
        'parent_guid' => 'getParentGuid',
        'percent_spent' => 'getPercentSpent',
        'projected_spending' => 'getProjectedSpending',
        'revision' => 'getRevision',
        'transaction_total' => 'getTransactionTotal',
        'updated_at' => 'getUpdatedAt',
        'user_guid' => 'getUserGuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('category_guid', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('is_exceeded', $data ?? [], null);
        $this->setIfExists('is_off_track', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('off_track_percentage', $data ?? [], null);
        $this->setIfExists('parent_guid', $data ?? [], null);
        $this->setIfExists('percent_spent', $data ?? [], null);
        $this->setIfExists('projected_spending', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('transaction_total', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount A goal amount set by the user for a category's transaction total during a month.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets category_guid
     *
     * @return string|null
     */
    public function getCategoryGuid()
    {
        return $this->container['category_guid'];
    }

    /**
     * Sets category_guid
     *
     * @param string|null $category_guid Unique identifier for the budget category. Defined by MX.
     *
     * @return self
     */
    public function setCategoryGuid($category_guid)
    {
        if (is_null($category_guid)) {
            throw new \InvalidArgumentException('non-nullable category_guid cannot be null');
        }
        $this->container['category_guid'] = $category_guid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Date and time the budget was created, represented in ISO 8601 format with timestamp.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid Unique identifier for the budget. Defined by MX.
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets is_exceeded
     *
     * @return bool|null
     */
    public function getIsExceeded()
    {
        return $this->container['is_exceeded'];
    }

    /**
     * Sets is_exceeded
     *
     * @param bool|null $is_exceeded If the budget has been exceeded, this field will be true. Otherwise, this field will be false.
     *
     * @return self
     */
    public function setIsExceeded($is_exceeded)
    {
        if (is_null($is_exceeded)) {
            throw new \InvalidArgumentException('non-nullable is_exceeded cannot be null');
        }
        $this->container['is_exceeded'] = $is_exceeded;

        return $this;
    }

    /**
     * Gets is_off_track
     *
     * @return bool|null
     */
    public function getIsOffTrack()
    {
        return $this->container['is_off_track'];
    }

    /**
     * Sets is_off_track
     *
     * @param bool|null $is_off_track If the budget is off track, this field will be true. Otherwise, this field will be false.
     *
     * @return self
     */
    public function setIsOffTrack($is_off_track)
    {
        if (is_null($is_off_track)) {
            throw new \InvalidArgumentException('non-nullable is_off_track cannot be null');
        }
        $this->container['is_off_track'] = $is_off_track;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional information a partner can store on the budget.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the budget that is visible to the user (ie \"Food\", \"Bills\", \"Entertainment\", etc).
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets off_track_percentage
     *
     * @return float|null
     */
    public function getOffTrackPercentage()
    {
        return $this->container['off_track_percentage'];
    }

    /**
     * Sets off_track_percentage
     *
     * @param float|null $off_track_percentage The percentage amount of off track spending. (Deprecated).
     *
     * @return self
     */
    public function setOffTrackPercentage($off_track_percentage)
    {
        if (is_null($off_track_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'off_track_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('off_track_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['off_track_percentage'] = $off_track_percentage;

        return $this;
    }

    /**
     * Gets parent_guid
     *
     * @return string|null
     */
    public function getParentGuid()
    {
        return $this->container['parent_guid'];
    }

    /**
     * Sets parent_guid
     *
     * @param string|null $parent_guid Unique identifier for the parent budget. Defined by MX.
     *
     * @return self
     */
    public function setParentGuid($parent_guid)
    {
        if (is_null($parent_guid)) {
            array_push($this->openAPINullablesSetToNull, 'parent_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_guid'] = $parent_guid;

        return $this;
    }

    /**
     * Gets percent_spent
     *
     * @return float|null
     */
    public function getPercentSpent()
    {
        return $this->container['percent_spent'];
    }

    /**
     * Sets percent_spent
     *
     * @param float|null $percent_spent The percentage of a budget that has been spent during the current calendar month Calculated as the transaction total divided by the amount and then multiplied by 100.A value of zero will be returned when `amount` is zero.
     *
     * @return self
     */
    public function setPercentSpent($percent_spent)
    {
        if (is_null($percent_spent)) {
            array_push($this->openAPINullablesSetToNull, 'percent_spent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_spent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percent_spent'] = $percent_spent;

        return $this;
    }

    /**
     * Gets projected_spending
     *
     * @return float|null
     */
    public function getProjectedSpending()
    {
        return $this->container['projected_spending'];
    }

    /**
     * Sets projected_spending
     *
     * @param float|null $projected_spending The projected amount of spending for the budget.
     *
     * @return self
     */
    public function setProjectedSpending($projected_spending)
    {
        if (is_null($projected_spending)) {
            throw new \InvalidArgumentException('non-nullable projected_spending cannot be null');
        }
        $this->container['projected_spending'] = $projected_spending;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision The revision number of this budget record.
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            throw new \InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets transaction_total
     *
     * @return mixed|null
     */
    public function getTransactionTotal()
    {
        return $this->container['transaction_total'];
    }

    /**
     * Sets transaction_total
     *
     * @param mixed|null $transaction_total The cumulative amount of all transactions under the budget.
     *
     * @return self
     */
    public function setTransactionTotal($transaction_total)
    {
        if (is_null($transaction_total)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_total'] = $transaction_total;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return mixed|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param mixed|null $updated_at Date and time the budget was updated, represented in ISO 8601 format with timestamp.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return mixed|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param mixed|null $user_guid Unique identifier for the user. Defined by MX.
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            array_push($this->openAPINullablesSetToNull, 'user_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


