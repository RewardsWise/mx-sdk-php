<?php
/**
 * InstitutionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstitutionResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InstitutionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstitutionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'forgot_password_url' => 'string',
        'forgot_username_url' => 'string',
        'instructional_text' => 'string',
        'medium_logo_url' => 'string',
        'name' => 'string',
        'small_logo_url' => 'string',
        'supports_account_identification' => 'bool',
        'supports_account_statement' => 'bool',
        'supports_account_verification' => 'bool',
        'supports_oauth' => 'bool',
        'supports_tax_document' => 'bool',
        'supports_transaction_history' => 'bool',
        'trouble_signing_in_url' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'forgot_password_url' => null,
        'forgot_username_url' => null,
        'instructional_text' => null,
        'medium_logo_url' => null,
        'name' => null,
        'small_logo_url' => null,
        'supports_account_identification' => null,
        'supports_account_statement' => null,
        'supports_account_verification' => null,
        'supports_oauth' => null,
        'supports_tax_document' => null,
        'supports_transaction_history' => null,
        'trouble_signing_in_url' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => true,
        'forgot_password_url' => true,
        'forgot_username_url' => true,
        'instructional_text' => true,
        'medium_logo_url' => true,
        'name' => true,
        'small_logo_url' => true,
        'supports_account_identification' => true,
        'supports_account_statement' => true,
        'supports_account_verification' => true,
        'supports_oauth' => true,
        'supports_tax_document' => true,
        'supports_transaction_history' => true,
        'trouble_signing_in_url' => true,
        'url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'forgot_password_url' => 'forgot_password_url',
        'forgot_username_url' => 'forgot_username_url',
        'instructional_text' => 'instructional_text',
        'medium_logo_url' => 'medium_logo_url',
        'name' => 'name',
        'small_logo_url' => 'small_logo_url',
        'supports_account_identification' => 'supports_account_identification',
        'supports_account_statement' => 'supports_account_statement',
        'supports_account_verification' => 'supports_account_verification',
        'supports_oauth' => 'supports_oauth',
        'supports_tax_document' => 'supports_tax_document',
        'supports_transaction_history' => 'supports_transaction_history',
        'trouble_signing_in_url' => 'trouble_signing_in_url',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'forgot_password_url' => 'setForgotPasswordUrl',
        'forgot_username_url' => 'setForgotUsernameUrl',
        'instructional_text' => 'setInstructionalText',
        'medium_logo_url' => 'setMediumLogoUrl',
        'name' => 'setName',
        'small_logo_url' => 'setSmallLogoUrl',
        'supports_account_identification' => 'setSupportsAccountIdentification',
        'supports_account_statement' => 'setSupportsAccountStatement',
        'supports_account_verification' => 'setSupportsAccountVerification',
        'supports_oauth' => 'setSupportsOauth',
        'supports_tax_document' => 'setSupportsTaxDocument',
        'supports_transaction_history' => 'setSupportsTransactionHistory',
        'trouble_signing_in_url' => 'setTroubleSigningInUrl',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'forgot_password_url' => 'getForgotPasswordUrl',
        'forgot_username_url' => 'getForgotUsernameUrl',
        'instructional_text' => 'getInstructionalText',
        'medium_logo_url' => 'getMediumLogoUrl',
        'name' => 'getName',
        'small_logo_url' => 'getSmallLogoUrl',
        'supports_account_identification' => 'getSupportsAccountIdentification',
        'supports_account_statement' => 'getSupportsAccountStatement',
        'supports_account_verification' => 'getSupportsAccountVerification',
        'supports_oauth' => 'getSupportsOauth',
        'supports_tax_document' => 'getSupportsTaxDocument',
        'supports_transaction_history' => 'getSupportsTransactionHistory',
        'trouble_signing_in_url' => 'getTroubleSigningInUrl',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('forgot_password_url', $data ?? [], null);
        $this->setIfExists('forgot_username_url', $data ?? [], null);
        $this->setIfExists('instructional_text', $data ?? [], null);
        $this->setIfExists('medium_logo_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('small_logo_url', $data ?? [], null);
        $this->setIfExists('supports_account_identification', $data ?? [], null);
        $this->setIfExists('supports_account_statement', $data ?? [], null);
        $this->setIfExists('supports_account_verification', $data ?? [], null);
        $this->setIfExists('supports_oauth', $data ?? [], null);
        $this->setIfExists('supports_tax_document', $data ?? [], null);
        $this->setIfExists('supports_transaction_history', $data ?? [], null);
        $this->setIfExists('trouble_signing_in_url', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets forgot_password_url
     *
     * @return string|null
     */
    public function getForgotPasswordUrl()
    {
        return $this->container['forgot_password_url'];
    }

    /**
     * Sets forgot_password_url
     *
     * @param string|null $forgot_password_url forgot_password_url
     *
     * @return self
     */
    public function setForgotPasswordUrl($forgot_password_url)
    {
        if (is_null($forgot_password_url)) {
            array_push($this->openAPINullablesSetToNull, 'forgot_password_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forgot_password_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forgot_password_url'] = $forgot_password_url;

        return $this;
    }

    /**
     * Gets forgot_username_url
     *
     * @return string|null
     */
    public function getForgotUsernameUrl()
    {
        return $this->container['forgot_username_url'];
    }

    /**
     * Sets forgot_username_url
     *
     * @param string|null $forgot_username_url forgot_username_url
     *
     * @return self
     */
    public function setForgotUsernameUrl($forgot_username_url)
    {
        if (is_null($forgot_username_url)) {
            array_push($this->openAPINullablesSetToNull, 'forgot_username_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forgot_username_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forgot_username_url'] = $forgot_username_url;

        return $this;
    }

    /**
     * Gets instructional_text
     *
     * @return string|null
     */
    public function getInstructionalText()
    {
        return $this->container['instructional_text'];
    }

    /**
     * Sets instructional_text
     *
     * @param string|null $instructional_text instructional_text
     *
     * @return self
     */
    public function setInstructionalText($instructional_text)
    {
        if (is_null($instructional_text)) {
            array_push($this->openAPINullablesSetToNull, 'instructional_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instructional_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instructional_text'] = $instructional_text;

        return $this;
    }

    /**
     * Gets medium_logo_url
     *
     * @return string|null
     */
    public function getMediumLogoUrl()
    {
        return $this->container['medium_logo_url'];
    }

    /**
     * Sets medium_logo_url
     *
     * @param string|null $medium_logo_url medium_logo_url
     *
     * @return self
     */
    public function setMediumLogoUrl($medium_logo_url)
    {
        if (is_null($medium_logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'medium_logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('medium_logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['medium_logo_url'] = $medium_logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets small_logo_url
     *
     * @return string|null
     */
    public function getSmallLogoUrl()
    {
        return $this->container['small_logo_url'];
    }

    /**
     * Sets small_logo_url
     *
     * @param string|null $small_logo_url small_logo_url
     *
     * @return self
     */
    public function setSmallLogoUrl($small_logo_url)
    {
        if (is_null($small_logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'small_logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small_logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small_logo_url'] = $small_logo_url;

        return $this;
    }

    /**
     * Gets supports_account_identification
     *
     * @return bool|null
     */
    public function getSupportsAccountIdentification()
    {
        return $this->container['supports_account_identification'];
    }

    /**
     * Sets supports_account_identification
     *
     * @param bool|null $supports_account_identification supports_account_identification
     *
     * @return self
     */
    public function setSupportsAccountIdentification($supports_account_identification)
    {
        if (is_null($supports_account_identification)) {
            array_push($this->openAPINullablesSetToNull, 'supports_account_identification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_account_identification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_account_identification'] = $supports_account_identification;

        return $this;
    }

    /**
     * Gets supports_account_statement
     *
     * @return bool|null
     */
    public function getSupportsAccountStatement()
    {
        return $this->container['supports_account_statement'];
    }

    /**
     * Sets supports_account_statement
     *
     * @param bool|null $supports_account_statement supports_account_statement
     *
     * @return self
     */
    public function setSupportsAccountStatement($supports_account_statement)
    {
        if (is_null($supports_account_statement)) {
            array_push($this->openAPINullablesSetToNull, 'supports_account_statement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_account_statement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_account_statement'] = $supports_account_statement;

        return $this;
    }

    /**
     * Gets supports_account_verification
     *
     * @return bool|null
     */
    public function getSupportsAccountVerification()
    {
        return $this->container['supports_account_verification'];
    }

    /**
     * Sets supports_account_verification
     *
     * @param bool|null $supports_account_verification supports_account_verification
     *
     * @return self
     */
    public function setSupportsAccountVerification($supports_account_verification)
    {
        if (is_null($supports_account_verification)) {
            array_push($this->openAPINullablesSetToNull, 'supports_account_verification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_account_verification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_account_verification'] = $supports_account_verification;

        return $this;
    }

    /**
     * Gets supports_oauth
     *
     * @return bool|null
     */
    public function getSupportsOauth()
    {
        return $this->container['supports_oauth'];
    }

    /**
     * Sets supports_oauth
     *
     * @param bool|null $supports_oauth supports_oauth
     *
     * @return self
     */
    public function setSupportsOauth($supports_oauth)
    {
        if (is_null($supports_oauth)) {
            array_push($this->openAPINullablesSetToNull, 'supports_oauth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_oauth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_oauth'] = $supports_oauth;

        return $this;
    }

    /**
     * Gets supports_tax_document
     *
     * @return bool|null
     */
    public function getSupportsTaxDocument()
    {
        return $this->container['supports_tax_document'];
    }

    /**
     * Sets supports_tax_document
     *
     * @param bool|null $supports_tax_document supports_tax_document
     *
     * @return self
     */
    public function setSupportsTaxDocument($supports_tax_document)
    {
        if (is_null($supports_tax_document)) {
            array_push($this->openAPINullablesSetToNull, 'supports_tax_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_tax_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_tax_document'] = $supports_tax_document;

        return $this;
    }

    /**
     * Gets supports_transaction_history
     *
     * @return bool|null
     */
    public function getSupportsTransactionHistory()
    {
        return $this->container['supports_transaction_history'];
    }

    /**
     * Sets supports_transaction_history
     *
     * @param bool|null $supports_transaction_history supports_transaction_history
     *
     * @return self
     */
    public function setSupportsTransactionHistory($supports_transaction_history)
    {
        if (is_null($supports_transaction_history)) {
            array_push($this->openAPINullablesSetToNull, 'supports_transaction_history');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_transaction_history', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_transaction_history'] = $supports_transaction_history;

        return $this;
    }

    /**
     * Gets trouble_signing_in_url
     *
     * @return string|null
     */
    public function getTroubleSigningInUrl()
    {
        return $this->container['trouble_signing_in_url'];
    }

    /**
     * Sets trouble_signing_in_url
     *
     * @param string|null $trouble_signing_in_url trouble_signing_in_url
     *
     * @return self
     */
    public function setTroubleSigningInUrl($trouble_signing_in_url)
    {
        if (is_null($trouble_signing_in_url)) {
            array_push($this->openAPINullablesSetToNull, 'trouble_signing_in_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trouble_signing_in_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trouble_signing_in_url'] = $trouble_signing_in_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


