<?php
/**
 * MemberResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MemberResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MemberResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MemberResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'error' => 'string',
        'aggregated_at' => 'string',
        'background_aggregation_is_disabled' => 'bool',
        'connection_status' => 'string',
        'guid' => 'string',
        'id' => 'string',
        'institution_code' => 'string',
        'is_being_aggregated' => 'bool',
        'is_managed_by_user' => 'bool',
        'is_manual' => 'bool',
        'is_oauth' => 'bool',
        'metadata' => 'string',
        'most_recent_job_detail_code' => 'string',
        'most_recent_job_detail_text' => 'string',
        'name' => 'string',
        'oauth_window_uri' => 'string',
        'successfully_aggregated_at' => 'string',
        'use_cases' => 'string[]',
        'user_guid' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'error' => null,
        'aggregated_at' => null,
        'background_aggregation_is_disabled' => null,
        'connection_status' => null,
        'guid' => null,
        'id' => null,
        'institution_code' => null,
        'is_being_aggregated' => null,
        'is_managed_by_user' => null,
        'is_manual' => null,
        'is_oauth' => null,
        'metadata' => null,
        'most_recent_job_detail_code' => null,
        'most_recent_job_detail_text' => null,
        'name' => null,
        'oauth_window_uri' => null,
        'successfully_aggregated_at' => null,
        'use_cases' => null,
        'user_guid' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'error' => true,
        'aggregated_at' => true,
        'background_aggregation_is_disabled' => false,
        'connection_status' => true,
        'guid' => true,
        'id' => true,
        'institution_code' => true,
        'is_being_aggregated' => true,
        'is_managed_by_user' => true,
        'is_manual' => true,
        'is_oauth' => true,
        'metadata' => true,
        'most_recent_job_detail_code' => true,
        'most_recent_job_detail_text' => true,
        'name' => true,
        'oauth_window_uri' => true,
        'successfully_aggregated_at' => true,
        'use_cases' => true,
        'user_guid' => true,
        'user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error' => 'error',
        'aggregated_at' => 'aggregated_at',
        'background_aggregation_is_disabled' => 'background_aggregation_is_disabled',
        'connection_status' => 'connection_status',
        'guid' => 'guid',
        'id' => 'id',
        'institution_code' => 'institution_code',
        'is_being_aggregated' => 'is_being_aggregated',
        'is_managed_by_user' => 'is_managed_by_user',
        'is_manual' => 'is_manual',
        'is_oauth' => 'is_oauth',
        'metadata' => 'metadata',
        'most_recent_job_detail_code' => 'most_recent_job_detail_code',
        'most_recent_job_detail_text' => 'most_recent_job_detail_text',
        'name' => 'name',
        'oauth_window_uri' => 'oauth_window_uri',
        'successfully_aggregated_at' => 'successfully_aggregated_at',
        'use_cases' => 'use_cases',
        'user_guid' => 'user_guid',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error' => 'setError',
        'aggregated_at' => 'setAggregatedAt',
        'background_aggregation_is_disabled' => 'setBackgroundAggregationIsDisabled',
        'connection_status' => 'setConnectionStatus',
        'guid' => 'setGuid',
        'id' => 'setId',
        'institution_code' => 'setInstitutionCode',
        'is_being_aggregated' => 'setIsBeingAggregated',
        'is_managed_by_user' => 'setIsManagedByUser',
        'is_manual' => 'setIsManual',
        'is_oauth' => 'setIsOauth',
        'metadata' => 'setMetadata',
        'most_recent_job_detail_code' => 'setMostRecentJobDetailCode',
        'most_recent_job_detail_text' => 'setMostRecentJobDetailText',
        'name' => 'setName',
        'oauth_window_uri' => 'setOauthWindowUri',
        'successfully_aggregated_at' => 'setSuccessfullyAggregatedAt',
        'use_cases' => 'setUseCases',
        'user_guid' => 'setUserGuid',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error' => 'getError',
        'aggregated_at' => 'getAggregatedAt',
        'background_aggregation_is_disabled' => 'getBackgroundAggregationIsDisabled',
        'connection_status' => 'getConnectionStatus',
        'guid' => 'getGuid',
        'id' => 'getId',
        'institution_code' => 'getInstitutionCode',
        'is_being_aggregated' => 'getIsBeingAggregated',
        'is_managed_by_user' => 'getIsManagedByUser',
        'is_manual' => 'getIsManual',
        'is_oauth' => 'getIsOauth',
        'metadata' => 'getMetadata',
        'most_recent_job_detail_code' => 'getMostRecentJobDetailCode',
        'most_recent_job_detail_text' => 'getMostRecentJobDetailText',
        'name' => 'getName',
        'oauth_window_uri' => 'getOauthWindowUri',
        'successfully_aggregated_at' => 'getSuccessfullyAggregatedAt',
        'use_cases' => 'getUseCases',
        'user_guid' => 'getUserGuid',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('aggregated_at', $data ?? [], null);
        $this->setIfExists('background_aggregation_is_disabled', $data ?? [], null);
        $this->setIfExists('connection_status', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('institution_code', $data ?? [], null);
        $this->setIfExists('is_being_aggregated', $data ?? [], null);
        $this->setIfExists('is_managed_by_user', $data ?? [], null);
        $this->setIfExists('is_manual', $data ?? [], null);
        $this->setIfExists('is_oauth', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('most_recent_job_detail_code', $data ?? [], null);
        $this->setIfExists('most_recent_job_detail_text', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('oauth_window_uri', $data ?? [], null);
        $this->setIfExists('successfully_aggregated_at', $data ?? [], null);
        $this->setIfExists('use_cases', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets aggregated_at
     *
     * @return string|null
     */
    public function getAggregatedAt()
    {
        return $this->container['aggregated_at'];
    }

    /**
     * Sets aggregated_at
     *
     * @param string|null $aggregated_at aggregated_at
     *
     * @return self
     */
    public function setAggregatedAt($aggregated_at)
    {
        if (is_null($aggregated_at)) {
            array_push($this->openAPINullablesSetToNull, 'aggregated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregated_at'] = $aggregated_at;

        return $this;
    }

    /**
     * Gets background_aggregation_is_disabled
     *
     * @return bool|null
     */
    public function getBackgroundAggregationIsDisabled()
    {
        return $this->container['background_aggregation_is_disabled'];
    }

    /**
     * Sets background_aggregation_is_disabled
     *
     * @param bool|null $background_aggregation_is_disabled background_aggregation_is_disabled
     *
     * @return self
     */
    public function setBackgroundAggregationIsDisabled($background_aggregation_is_disabled)
    {
        if (is_null($background_aggregation_is_disabled)) {
            throw new \InvalidArgumentException('non-nullable background_aggregation_is_disabled cannot be null');
        }
        $this->container['background_aggregation_is_disabled'] = $background_aggregation_is_disabled;

        return $this;
    }

    /**
     * Gets connection_status
     *
     * @return string|null
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string|null $connection_status connection_status
     *
     * @return self
     */
    public function setConnectionStatus($connection_status)
    {
        if (is_null($connection_status)) {
            array_push($this->openAPINullablesSetToNull, 'connection_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('connection_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution_code
     *
     * @return string|null
     */
    public function getInstitutionCode()
    {
        return $this->container['institution_code'];
    }

    /**
     * Sets institution_code
     *
     * @param string|null $institution_code institution_code
     *
     * @return self
     */
    public function setInstitutionCode($institution_code)
    {
        if (is_null($institution_code)) {
            array_push($this->openAPINullablesSetToNull, 'institution_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('institution_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['institution_code'] = $institution_code;

        return $this;
    }

    /**
     * Gets is_being_aggregated
     *
     * @return bool|null
     */
    public function getIsBeingAggregated()
    {
        return $this->container['is_being_aggregated'];
    }

    /**
     * Sets is_being_aggregated
     *
     * @param bool|null $is_being_aggregated is_being_aggregated
     *
     * @return self
     */
    public function setIsBeingAggregated($is_being_aggregated)
    {
        if (is_null($is_being_aggregated)) {
            array_push($this->openAPINullablesSetToNull, 'is_being_aggregated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_being_aggregated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_being_aggregated'] = $is_being_aggregated;

        return $this;
    }

    /**
     * Gets is_managed_by_user
     *
     * @return bool|null
     */
    public function getIsManagedByUser()
    {
        return $this->container['is_managed_by_user'];
    }

    /**
     * Sets is_managed_by_user
     *
     * @param bool|null $is_managed_by_user is_managed_by_user
     *
     * @return self
     */
    public function setIsManagedByUser($is_managed_by_user)
    {
        if (is_null($is_managed_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'is_managed_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_managed_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_managed_by_user'] = $is_managed_by_user;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual is_manual
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        if (is_null($is_manual)) {
            array_push($this->openAPINullablesSetToNull, 'is_manual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_manual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets is_oauth
     *
     * @return bool|null
     */
    public function getIsOauth()
    {
        return $this->container['is_oauth'];
    }

    /**
     * Sets is_oauth
     *
     * @param bool|null $is_oauth is_oauth
     *
     * @return self
     */
    public function setIsOauth($is_oauth)
    {
        if (is_null($is_oauth)) {
            array_push($this->openAPINullablesSetToNull, 'is_oauth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_oauth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_oauth'] = $is_oauth;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets most_recent_job_detail_code
     *
     * @return string|null
     */
    public function getMostRecentJobDetailCode()
    {
        return $this->container['most_recent_job_detail_code'];
    }

    /**
     * Sets most_recent_job_detail_code
     *
     * @param string|null $most_recent_job_detail_code most_recent_job_detail_code
     *
     * @return self
     */
    public function setMostRecentJobDetailCode($most_recent_job_detail_code)
    {
        if (is_null($most_recent_job_detail_code)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_job_detail_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_job_detail_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['most_recent_job_detail_code'] = $most_recent_job_detail_code;

        return $this;
    }

    /**
     * Gets most_recent_job_detail_text
     *
     * @return string|null
     */
    public function getMostRecentJobDetailText()
    {
        return $this->container['most_recent_job_detail_text'];
    }

    /**
     * Sets most_recent_job_detail_text
     *
     * @param string|null $most_recent_job_detail_text most_recent_job_detail_text
     *
     * @return self
     */
    public function setMostRecentJobDetailText($most_recent_job_detail_text)
    {
        if (is_null($most_recent_job_detail_text)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_job_detail_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_job_detail_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['most_recent_job_detail_text'] = $most_recent_job_detail_text;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets oauth_window_uri
     *
     * @return string|null
     */
    public function getOauthWindowUri()
    {
        return $this->container['oauth_window_uri'];
    }

    /**
     * Sets oauth_window_uri
     *
     * @param string|null $oauth_window_uri oauth_window_uri
     *
     * @return self
     */
    public function setOauthWindowUri($oauth_window_uri)
    {
        if (is_null($oauth_window_uri)) {
            array_push($this->openAPINullablesSetToNull, 'oauth_window_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oauth_window_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oauth_window_uri'] = $oauth_window_uri;

        return $this;
    }

    /**
     * Gets successfully_aggregated_at
     *
     * @return string|null
     */
    public function getSuccessfullyAggregatedAt()
    {
        return $this->container['successfully_aggregated_at'];
    }

    /**
     * Sets successfully_aggregated_at
     *
     * @param string|null $successfully_aggregated_at successfully_aggregated_at
     *
     * @return self
     */
    public function setSuccessfullyAggregatedAt($successfully_aggregated_at)
    {
        if (is_null($successfully_aggregated_at)) {
            array_push($this->openAPINullablesSetToNull, 'successfully_aggregated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successfully_aggregated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['successfully_aggregated_at'] = $successfully_aggregated_at;

        return $this;
    }

    /**
     * Gets use_cases
     *
     * @return string[]|null
     */
    public function getUseCases()
    {
        return $this->container['use_cases'];
    }

    /**
     * Sets use_cases
     *
     * @param string[]|null $use_cases use_cases
     *
     * @return self
     */
    public function setUseCases($use_cases)
    {
        if (is_null($use_cases)) {
            array_push($this->openAPINullablesSetToNull, 'use_cases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_cases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_cases'] = $use_cases;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid user_guid
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            array_push($this->openAPINullablesSetToNull, 'user_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


