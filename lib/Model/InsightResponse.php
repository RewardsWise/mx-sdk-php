<?php
/**
 * InsightResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InsightResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InsightResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InsightResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_at' => 'string',
        'client_guid' => 'string',
        'created_at' => 'string',
        'cta_clicked_at' => 'string',
        'description' => 'string',
        'guid' => 'string',
        'has_associated_accounts' => 'bool',
        'has_associated_merchants' => 'bool',
        'has_associated_scheduled_payments' => 'bool',
        'has_associated_transactions' => 'bool',
        'has_been_displayed' => 'bool',
        'is_dismissed' => 'bool',
        'micro_call_to_action' => 'string',
        'micro_description' => 'string',
        'micro_title' => 'string',
        'template' => 'string',
        'title' => 'string',
        'updated_at' => 'string',
        'user_guid' => 'string',
        'user_id' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_at' => null,
        'client_guid' => null,
        'created_at' => null,
        'cta_clicked_at' => null,
        'description' => null,
        'guid' => null,
        'has_associated_accounts' => null,
        'has_associated_merchants' => null,
        'has_associated_scheduled_payments' => null,
        'has_associated_transactions' => null,
        'has_been_displayed' => null,
        'is_dismissed' => null,
        'micro_call_to_action' => null,
        'micro_description' => null,
        'micro_title' => null,
        'template' => null,
        'title' => null,
        'updated_at' => null,
        'user_guid' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active_at' => true,
        'client_guid' => true,
        'created_at' => true,
        'cta_clicked_at' => true,
        'description' => true,
        'guid' => true,
        'has_associated_accounts' => true,
        'has_associated_merchants' => true,
        'has_associated_scheduled_payments' => true,
        'has_associated_transactions' => true,
        'has_been_displayed' => true,
        'is_dismissed' => true,
        'micro_call_to_action' => true,
        'micro_description' => true,
        'micro_title' => true,
        'template' => true,
        'title' => true,
        'updated_at' => true,
        'user_guid' => false,
        'user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_at' => 'active_at',
        'client_guid' => 'client_guid',
        'created_at' => 'created_at',
        'cta_clicked_at' => 'cta_clicked_at',
        'description' => 'description',
        'guid' => 'guid',
        'has_associated_accounts' => 'has_associated_accounts',
        'has_associated_merchants' => 'has_associated_merchants',
        'has_associated_scheduled_payments' => 'has_associated_scheduled_payments',
        'has_associated_transactions' => 'has_associated_transactions',
        'has_been_displayed' => 'has_been_displayed',
        'is_dismissed' => 'is_dismissed',
        'micro_call_to_action' => 'micro_call_to_action',
        'micro_description' => 'micro_description',
        'micro_title' => 'micro_title',
        'template' => 'template',
        'title' => 'title',
        'updated_at' => 'updated_at',
        'user_guid' => 'user_guid',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_at' => 'setActiveAt',
        'client_guid' => 'setClientGuid',
        'created_at' => 'setCreatedAt',
        'cta_clicked_at' => 'setCtaClickedAt',
        'description' => 'setDescription',
        'guid' => 'setGuid',
        'has_associated_accounts' => 'setHasAssociatedAccounts',
        'has_associated_merchants' => 'setHasAssociatedMerchants',
        'has_associated_scheduled_payments' => 'setHasAssociatedScheduledPayments',
        'has_associated_transactions' => 'setHasAssociatedTransactions',
        'has_been_displayed' => 'setHasBeenDisplayed',
        'is_dismissed' => 'setIsDismissed',
        'micro_call_to_action' => 'setMicroCallToAction',
        'micro_description' => 'setMicroDescription',
        'micro_title' => 'setMicroTitle',
        'template' => 'setTemplate',
        'title' => 'setTitle',
        'updated_at' => 'setUpdatedAt',
        'user_guid' => 'setUserGuid',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_at' => 'getActiveAt',
        'client_guid' => 'getClientGuid',
        'created_at' => 'getCreatedAt',
        'cta_clicked_at' => 'getCtaClickedAt',
        'description' => 'getDescription',
        'guid' => 'getGuid',
        'has_associated_accounts' => 'getHasAssociatedAccounts',
        'has_associated_merchants' => 'getHasAssociatedMerchants',
        'has_associated_scheduled_payments' => 'getHasAssociatedScheduledPayments',
        'has_associated_transactions' => 'getHasAssociatedTransactions',
        'has_been_displayed' => 'getHasBeenDisplayed',
        'is_dismissed' => 'getIsDismissed',
        'micro_call_to_action' => 'getMicroCallToAction',
        'micro_description' => 'getMicroDescription',
        'micro_title' => 'getMicroTitle',
        'template' => 'getTemplate',
        'title' => 'getTitle',
        'updated_at' => 'getUpdatedAt',
        'user_guid' => 'getUserGuid',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active_at', $data ?? [], null);
        $this->setIfExists('client_guid', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('cta_clicked_at', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('has_associated_accounts', $data ?? [], null);
        $this->setIfExists('has_associated_merchants', $data ?? [], null);
        $this->setIfExists('has_associated_scheduled_payments', $data ?? [], null);
        $this->setIfExists('has_associated_transactions', $data ?? [], null);
        $this->setIfExists('has_been_displayed', $data ?? [], null);
        $this->setIfExists('is_dismissed', $data ?? [], null);
        $this->setIfExists('micro_call_to_action', $data ?? [], null);
        $this->setIfExists('micro_description', $data ?? [], null);
        $this->setIfExists('micro_title', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_at
     *
     * @return string|null
     */
    public function getActiveAt()
    {
        return $this->container['active_at'];
    }

    /**
     * Sets active_at
     *
     * @param string|null $active_at active_at
     *
     * @return self
     */
    public function setActiveAt($active_at)
    {
        if (is_null($active_at)) {
            array_push($this->openAPINullablesSetToNull, 'active_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_at'] = $active_at;

        return $this;
    }

    /**
     * Gets client_guid
     *
     * @return string|null
     */
    public function getClientGuid()
    {
        return $this->container['client_guid'];
    }

    /**
     * Sets client_guid
     *
     * @param string|null $client_guid client_guid
     *
     * @return self
     */
    public function setClientGuid($client_guid)
    {
        if (is_null($client_guid)) {
            array_push($this->openAPINullablesSetToNull, 'client_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['client_guid'] = $client_guid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets cta_clicked_at
     *
     * @return string|null
     */
    public function getCtaClickedAt()
    {
        return $this->container['cta_clicked_at'];
    }

    /**
     * Sets cta_clicked_at
     *
     * @param string|null $cta_clicked_at cta_clicked_at
     *
     * @return self
     */
    public function setCtaClickedAt($cta_clicked_at)
    {
        if (is_null($cta_clicked_at)) {
            array_push($this->openAPINullablesSetToNull, 'cta_clicked_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cta_clicked_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cta_clicked_at'] = $cta_clicked_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets has_associated_accounts
     *
     * @return bool|null
     */
    public function getHasAssociatedAccounts()
    {
        return $this->container['has_associated_accounts'];
    }

    /**
     * Sets has_associated_accounts
     *
     * @param bool|null $has_associated_accounts has_associated_accounts
     *
     * @return self
     */
    public function setHasAssociatedAccounts($has_associated_accounts)
    {
        if (is_null($has_associated_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'has_associated_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_associated_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_associated_accounts'] = $has_associated_accounts;

        return $this;
    }

    /**
     * Gets has_associated_merchants
     *
     * @return bool|null
     */
    public function getHasAssociatedMerchants()
    {
        return $this->container['has_associated_merchants'];
    }

    /**
     * Sets has_associated_merchants
     *
     * @param bool|null $has_associated_merchants has_associated_merchants
     *
     * @return self
     */
    public function setHasAssociatedMerchants($has_associated_merchants)
    {
        if (is_null($has_associated_merchants)) {
            array_push($this->openAPINullablesSetToNull, 'has_associated_merchants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_associated_merchants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_associated_merchants'] = $has_associated_merchants;

        return $this;
    }

    /**
     * Gets has_associated_scheduled_payments
     *
     * @return bool|null
     */
    public function getHasAssociatedScheduledPayments()
    {
        return $this->container['has_associated_scheduled_payments'];
    }

    /**
     * Sets has_associated_scheduled_payments
     *
     * @param bool|null $has_associated_scheduled_payments has_associated_scheduled_payments
     *
     * @return self
     */
    public function setHasAssociatedScheduledPayments($has_associated_scheduled_payments)
    {
        if (is_null($has_associated_scheduled_payments)) {
            array_push($this->openAPINullablesSetToNull, 'has_associated_scheduled_payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_associated_scheduled_payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_associated_scheduled_payments'] = $has_associated_scheduled_payments;

        return $this;
    }

    /**
     * Gets has_associated_transactions
     *
     * @return bool|null
     */
    public function getHasAssociatedTransactions()
    {
        return $this->container['has_associated_transactions'];
    }

    /**
     * Sets has_associated_transactions
     *
     * @param bool|null $has_associated_transactions has_associated_transactions
     *
     * @return self
     */
    public function setHasAssociatedTransactions($has_associated_transactions)
    {
        if (is_null($has_associated_transactions)) {
            array_push($this->openAPINullablesSetToNull, 'has_associated_transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_associated_transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_associated_transactions'] = $has_associated_transactions;

        return $this;
    }

    /**
     * Gets has_been_displayed
     *
     * @return bool|null
     */
    public function getHasBeenDisplayed()
    {
        return $this->container['has_been_displayed'];
    }

    /**
     * Sets has_been_displayed
     *
     * @param bool|null $has_been_displayed has_been_displayed
     *
     * @return self
     */
    public function setHasBeenDisplayed($has_been_displayed)
    {
        if (is_null($has_been_displayed)) {
            array_push($this->openAPINullablesSetToNull, 'has_been_displayed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_been_displayed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_been_displayed'] = $has_been_displayed;

        return $this;
    }

    /**
     * Gets is_dismissed
     *
     * @return bool|null
     */
    public function getIsDismissed()
    {
        return $this->container['is_dismissed'];
    }

    /**
     * Sets is_dismissed
     *
     * @param bool|null $is_dismissed is_dismissed
     *
     * @return self
     */
    public function setIsDismissed($is_dismissed)
    {
        if (is_null($is_dismissed)) {
            array_push($this->openAPINullablesSetToNull, 'is_dismissed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_dismissed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_dismissed'] = $is_dismissed;

        return $this;
    }

    /**
     * Gets micro_call_to_action
     *
     * @return string|null
     */
    public function getMicroCallToAction()
    {
        return $this->container['micro_call_to_action'];
    }

    /**
     * Sets micro_call_to_action
     *
     * @param string|null $micro_call_to_action micro_call_to_action
     *
     * @return self
     */
    public function setMicroCallToAction($micro_call_to_action)
    {
        if (is_null($micro_call_to_action)) {
            array_push($this->openAPINullablesSetToNull, 'micro_call_to_action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('micro_call_to_action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['micro_call_to_action'] = $micro_call_to_action;

        return $this;
    }

    /**
     * Gets micro_description
     *
     * @return string|null
     */
    public function getMicroDescription()
    {
        return $this->container['micro_description'];
    }

    /**
     * Sets micro_description
     *
     * @param string|null $micro_description micro_description
     *
     * @return self
     */
    public function setMicroDescription($micro_description)
    {
        if (is_null($micro_description)) {
            array_push($this->openAPINullablesSetToNull, 'micro_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('micro_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['micro_description'] = $micro_description;

        return $this;
    }

    /**
     * Gets micro_title
     *
     * @return string|null
     */
    public function getMicroTitle()
    {
        return $this->container['micro_title'];
    }

    /**
     * Sets micro_title
     *
     * @param string|null $micro_title micro_title
     *
     * @return self
     */
    public function setMicroTitle($micro_title)
    {
        if (is_null($micro_title)) {
            array_push($this->openAPINullablesSetToNull, 'micro_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('micro_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['micro_title'] = $micro_title;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            array_push($this->openAPINullablesSetToNull, 'template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid user_guid
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            throw new \InvalidArgumentException('non-nullable user_guid cannot be null');
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return mixed|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param mixed|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


