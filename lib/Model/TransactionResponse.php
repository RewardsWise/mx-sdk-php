<?php
/**
 * TransactionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_guid' => 'string',
        'account_id' => 'string',
        'amount' => 'float',
        'category' => 'string',
        'category_guid' => 'string',
        'check_number_string' => 'string',
        'created_at' => 'string',
        'currency_code' => 'string',
        'date' => 'string',
        'description' => 'string',
        'extended_transaction_type' => 'string',
        'guid' => 'string',
        'id' => 'string',
        'is_bill_pay' => 'bool',
        'is_direct_deposit' => 'bool',
        'is_expense' => 'bool',
        'is_fee' => 'bool',
        'is_income' => 'bool',
        'is_international' => 'bool',
        'is_overdraft_fee' => 'bool',
        'is_payroll_advance' => 'bool',
        'is_recurring' => 'bool',
        'is_subscription' => 'bool',
        'latitude' => 'float',
        'localized_description' => 'string',
        'localized_memo' => 'string',
        'longitude' => 'float',
        'member_guid' => 'string',
        'member_is_managed_by_user' => 'bool',
        'memo' => 'string',
        'merchant_category_code' => 'int',
        'merchant_guid' => 'string',
        'merchant_location_guid' => 'string',
        'metadata' => 'string',
        'original_description' => 'string',
        'posted_at' => 'string',
        'status' => 'string',
        'top_level_category' => 'string',
        'transacted_at' => 'string',
        'type' => 'string',
        'updated_at' => 'string',
        'user_guid' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_guid' => null,
        'account_id' => null,
        'amount' => null,
        'category' => null,
        'category_guid' => null,
        'check_number_string' => null,
        'created_at' => null,
        'currency_code' => null,
        'date' => null,
        'description' => null,
        'extended_transaction_type' => null,
        'guid' => null,
        'id' => null,
        'is_bill_pay' => null,
        'is_direct_deposit' => null,
        'is_expense' => null,
        'is_fee' => null,
        'is_income' => null,
        'is_international' => null,
        'is_overdraft_fee' => null,
        'is_payroll_advance' => null,
        'is_recurring' => null,
        'is_subscription' => null,
        'latitude' => null,
        'localized_description' => null,
        'localized_memo' => null,
        'longitude' => null,
        'member_guid' => null,
        'member_is_managed_by_user' => null,
        'memo' => null,
        'merchant_category_code' => null,
        'merchant_guid' => null,
        'merchant_location_guid' => null,
        'metadata' => null,
        'original_description' => null,
        'posted_at' => null,
        'status' => null,
        'top_level_category' => null,
        'transacted_at' => null,
        'type' => null,
        'updated_at' => null,
        'user_guid' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_guid' => true,
        'account_id' => true,
        'amount' => true,
        'category' => true,
        'category_guid' => true,
        'check_number_string' => true,
        'created_at' => true,
        'currency_code' => true,
        'date' => true,
        'description' => true,
        'extended_transaction_type' => true,
        'guid' => true,
        'id' => true,
        'is_bill_pay' => true,
        'is_direct_deposit' => true,
        'is_expense' => true,
        'is_fee' => true,
        'is_income' => true,
        'is_international' => true,
        'is_overdraft_fee' => true,
        'is_payroll_advance' => true,
        'is_recurring' => true,
        'is_subscription' => true,
        'latitude' => true,
        'localized_description' => true,
        'localized_memo' => true,
        'longitude' => true,
        'member_guid' => true,
        'member_is_managed_by_user' => true,
        'memo' => true,
        'merchant_category_code' => true,
        'merchant_guid' => true,
        'merchant_location_guid' => true,
        'metadata' => true,
        'original_description' => true,
        'posted_at' => true,
        'status' => true,
        'top_level_category' => true,
        'transacted_at' => true,
        'type' => true,
        'updated_at' => true,
        'user_guid' => true,
        'user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_guid' => 'account_guid',
        'account_id' => 'account_id',
        'amount' => 'amount',
        'category' => 'category',
        'category_guid' => 'category_guid',
        'check_number_string' => 'check_number_string',
        'created_at' => 'created_at',
        'currency_code' => 'currency_code',
        'date' => 'date',
        'description' => 'description',
        'extended_transaction_type' => 'extended_transaction_type',
        'guid' => 'guid',
        'id' => 'id',
        'is_bill_pay' => 'is_bill_pay',
        'is_direct_deposit' => 'is_direct_deposit',
        'is_expense' => 'is_expense',
        'is_fee' => 'is_fee',
        'is_income' => 'is_income',
        'is_international' => 'is_international',
        'is_overdraft_fee' => 'is_overdraft_fee',
        'is_payroll_advance' => 'is_payroll_advance',
        'is_recurring' => 'is_recurring',
        'is_subscription' => 'is_subscription',
        'latitude' => 'latitude',
        'localized_description' => 'localized_description',
        'localized_memo' => 'localized_memo',
        'longitude' => 'longitude',
        'member_guid' => 'member_guid',
        'member_is_managed_by_user' => 'member_is_managed_by_user',
        'memo' => 'memo',
        'merchant_category_code' => 'merchant_category_code',
        'merchant_guid' => 'merchant_guid',
        'merchant_location_guid' => 'merchant_location_guid',
        'metadata' => 'metadata',
        'original_description' => 'original_description',
        'posted_at' => 'posted_at',
        'status' => 'status',
        'top_level_category' => 'top_level_category',
        'transacted_at' => 'transacted_at',
        'type' => 'type',
        'updated_at' => 'updated_at',
        'user_guid' => 'user_guid',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_guid' => 'setAccountGuid',
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'category' => 'setCategory',
        'category_guid' => 'setCategoryGuid',
        'check_number_string' => 'setCheckNumberString',
        'created_at' => 'setCreatedAt',
        'currency_code' => 'setCurrencyCode',
        'date' => 'setDate',
        'description' => 'setDescription',
        'extended_transaction_type' => 'setExtendedTransactionType',
        'guid' => 'setGuid',
        'id' => 'setId',
        'is_bill_pay' => 'setIsBillPay',
        'is_direct_deposit' => 'setIsDirectDeposit',
        'is_expense' => 'setIsExpense',
        'is_fee' => 'setIsFee',
        'is_income' => 'setIsIncome',
        'is_international' => 'setIsInternational',
        'is_overdraft_fee' => 'setIsOverdraftFee',
        'is_payroll_advance' => 'setIsPayrollAdvance',
        'is_recurring' => 'setIsRecurring',
        'is_subscription' => 'setIsSubscription',
        'latitude' => 'setLatitude',
        'localized_description' => 'setLocalizedDescription',
        'localized_memo' => 'setLocalizedMemo',
        'longitude' => 'setLongitude',
        'member_guid' => 'setMemberGuid',
        'member_is_managed_by_user' => 'setMemberIsManagedByUser',
        'memo' => 'setMemo',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'merchant_guid' => 'setMerchantGuid',
        'merchant_location_guid' => 'setMerchantLocationGuid',
        'metadata' => 'setMetadata',
        'original_description' => 'setOriginalDescription',
        'posted_at' => 'setPostedAt',
        'status' => 'setStatus',
        'top_level_category' => 'setTopLevelCategory',
        'transacted_at' => 'setTransactedAt',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'user_guid' => 'setUserGuid',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_guid' => 'getAccountGuid',
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'category' => 'getCategory',
        'category_guid' => 'getCategoryGuid',
        'check_number_string' => 'getCheckNumberString',
        'created_at' => 'getCreatedAt',
        'currency_code' => 'getCurrencyCode',
        'date' => 'getDate',
        'description' => 'getDescription',
        'extended_transaction_type' => 'getExtendedTransactionType',
        'guid' => 'getGuid',
        'id' => 'getId',
        'is_bill_pay' => 'getIsBillPay',
        'is_direct_deposit' => 'getIsDirectDeposit',
        'is_expense' => 'getIsExpense',
        'is_fee' => 'getIsFee',
        'is_income' => 'getIsIncome',
        'is_international' => 'getIsInternational',
        'is_overdraft_fee' => 'getIsOverdraftFee',
        'is_payroll_advance' => 'getIsPayrollAdvance',
        'is_recurring' => 'getIsRecurring',
        'is_subscription' => 'getIsSubscription',
        'latitude' => 'getLatitude',
        'localized_description' => 'getLocalizedDescription',
        'localized_memo' => 'getLocalizedMemo',
        'longitude' => 'getLongitude',
        'member_guid' => 'getMemberGuid',
        'member_is_managed_by_user' => 'getMemberIsManagedByUser',
        'memo' => 'getMemo',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'merchant_guid' => 'getMerchantGuid',
        'merchant_location_guid' => 'getMerchantLocationGuid',
        'metadata' => 'getMetadata',
        'original_description' => 'getOriginalDescription',
        'posted_at' => 'getPostedAt',
        'status' => 'getStatus',
        'top_level_category' => 'getTopLevelCategory',
        'transacted_at' => 'getTransactedAt',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'user_guid' => 'getUserGuid',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_guid', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('category_guid', $data ?? [], null);
        $this->setIfExists('check_number_string', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('extended_transaction_type', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_bill_pay', $data ?? [], null);
        $this->setIfExists('is_direct_deposit', $data ?? [], null);
        $this->setIfExists('is_expense', $data ?? [], null);
        $this->setIfExists('is_fee', $data ?? [], null);
        $this->setIfExists('is_income', $data ?? [], null);
        $this->setIfExists('is_international', $data ?? [], null);
        $this->setIfExists('is_overdraft_fee', $data ?? [], null);
        $this->setIfExists('is_payroll_advance', $data ?? [], null);
        $this->setIfExists('is_recurring', $data ?? [], null);
        $this->setIfExists('is_subscription', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('localized_description', $data ?? [], null);
        $this->setIfExists('localized_memo', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('member_guid', $data ?? [], null);
        $this->setIfExists('member_is_managed_by_user', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('merchant_category_code', $data ?? [], null);
        $this->setIfExists('merchant_guid', $data ?? [], null);
        $this->setIfExists('merchant_location_guid', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('original_description', $data ?? [], null);
        $this->setIfExists('posted_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('top_level_category', $data ?? [], null);
        $this->setIfExists('transacted_at', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('user_guid', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_guid
     *
     * @return string|null
     */
    public function getAccountGuid()
    {
        return $this->container['account_guid'];
    }

    /**
     * Sets account_guid
     *
     * @param string|null $account_guid account_guid
     *
     * @return self
     */
    public function setAccountGuid($account_guid)
    {
        if (is_null($account_guid)) {
            array_push($this->openAPINullablesSetToNull, 'account_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_guid'] = $account_guid;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_guid
     *
     * @return string|null
     */
    public function getCategoryGuid()
    {
        return $this->container['category_guid'];
    }

    /**
     * Sets category_guid
     *
     * @param string|null $category_guid category_guid
     *
     * @return self
     */
    public function setCategoryGuid($category_guid)
    {
        if (is_null($category_guid)) {
            array_push($this->openAPINullablesSetToNull, 'category_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_guid'] = $category_guid;

        return $this;
    }

    /**
     * Gets check_number_string
     *
     * @return string|null
     */
    public function getCheckNumberString()
    {
        return $this->container['check_number_string'];
    }

    /**
     * Sets check_number_string
     *
     * @param string|null $check_number_string check_number_string
     *
     * @return self
     */
    public function setCheckNumberString($check_number_string)
    {
        if (is_null($check_number_string)) {
            array_push($this->openAPINullablesSetToNull, 'check_number_string');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('check_number_string', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['check_number_string'] = $check_number_string;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets extended_transaction_type
     *
     * @return string|null
     */
    public function getExtendedTransactionType()
    {
        return $this->container['extended_transaction_type'];
    }

    /**
     * Sets extended_transaction_type
     *
     * @param string|null $extended_transaction_type extended_transaction_type
     *
     * @return self
     */
    public function setExtendedTransactionType($extended_transaction_type)
    {
        if (is_null($extended_transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'extended_transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extended_transaction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extended_transaction_type'] = $extended_transaction_type;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            array_push($this->openAPINullablesSetToNull, 'guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_bill_pay
     *
     * @return bool|null
     */
    public function getIsBillPay()
    {
        return $this->container['is_bill_pay'];
    }

    /**
     * Sets is_bill_pay
     *
     * @param bool|null $is_bill_pay is_bill_pay
     *
     * @return self
     */
    public function setIsBillPay($is_bill_pay)
    {
        if (is_null($is_bill_pay)) {
            array_push($this->openAPINullablesSetToNull, 'is_bill_pay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_bill_pay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_bill_pay'] = $is_bill_pay;

        return $this;
    }

    /**
     * Gets is_direct_deposit
     *
     * @return bool|null
     */
    public function getIsDirectDeposit()
    {
        return $this->container['is_direct_deposit'];
    }

    /**
     * Sets is_direct_deposit
     *
     * @param bool|null $is_direct_deposit is_direct_deposit
     *
     * @return self
     */
    public function setIsDirectDeposit($is_direct_deposit)
    {
        if (is_null($is_direct_deposit)) {
            array_push($this->openAPINullablesSetToNull, 'is_direct_deposit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_direct_deposit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_direct_deposit'] = $is_direct_deposit;

        return $this;
    }

    /**
     * Gets is_expense
     *
     * @return bool|null
     */
    public function getIsExpense()
    {
        return $this->container['is_expense'];
    }

    /**
     * Sets is_expense
     *
     * @param bool|null $is_expense is_expense
     *
     * @return self
     */
    public function setIsExpense($is_expense)
    {
        if (is_null($is_expense)) {
            array_push($this->openAPINullablesSetToNull, 'is_expense');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_expense', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_expense'] = $is_expense;

        return $this;
    }

    /**
     * Gets is_fee
     *
     * @return bool|null
     */
    public function getIsFee()
    {
        return $this->container['is_fee'];
    }

    /**
     * Sets is_fee
     *
     * @param bool|null $is_fee is_fee
     *
     * @return self
     */
    public function setIsFee($is_fee)
    {
        if (is_null($is_fee)) {
            array_push($this->openAPINullablesSetToNull, 'is_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_fee'] = $is_fee;

        return $this;
    }

    /**
     * Gets is_income
     *
     * @return bool|null
     */
    public function getIsIncome()
    {
        return $this->container['is_income'];
    }

    /**
     * Sets is_income
     *
     * @param bool|null $is_income is_income
     *
     * @return self
     */
    public function setIsIncome($is_income)
    {
        if (is_null($is_income)) {
            array_push($this->openAPINullablesSetToNull, 'is_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_income'] = $is_income;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param bool|null $is_international is_international
     *
     * @return self
     */
    public function setIsInternational($is_international)
    {
        if (is_null($is_international)) {
            array_push($this->openAPINullablesSetToNull, 'is_international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_international', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets is_overdraft_fee
     *
     * @return bool|null
     */
    public function getIsOverdraftFee()
    {
        return $this->container['is_overdraft_fee'];
    }

    /**
     * Sets is_overdraft_fee
     *
     * @param bool|null $is_overdraft_fee is_overdraft_fee
     *
     * @return self
     */
    public function setIsOverdraftFee($is_overdraft_fee)
    {
        if (is_null($is_overdraft_fee)) {
            array_push($this->openAPINullablesSetToNull, 'is_overdraft_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_overdraft_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_overdraft_fee'] = $is_overdraft_fee;

        return $this;
    }

    /**
     * Gets is_payroll_advance
     *
     * @return bool|null
     */
    public function getIsPayrollAdvance()
    {
        return $this->container['is_payroll_advance'];
    }

    /**
     * Sets is_payroll_advance
     *
     * @param bool|null $is_payroll_advance is_payroll_advance
     *
     * @return self
     */
    public function setIsPayrollAdvance($is_payroll_advance)
    {
        if (is_null($is_payroll_advance)) {
            array_push($this->openAPINullablesSetToNull, 'is_payroll_advance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_payroll_advance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_payroll_advance'] = $is_payroll_advance;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool|null $is_recurring is_recurring
     *
     * @return self
     */
    public function setIsRecurring($is_recurring)
    {
        if (is_null($is_recurring)) {
            array_push($this->openAPINullablesSetToNull, 'is_recurring');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_recurring', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets is_subscription
     *
     * @return bool|null
     */
    public function getIsSubscription()
    {
        return $this->container['is_subscription'];
    }

    /**
     * Sets is_subscription
     *
     * @param bool|null $is_subscription is_subscription
     *
     * @return self
     */
    public function setIsSubscription($is_subscription)
    {
        if (is_null($is_subscription)) {
            array_push($this->openAPINullablesSetToNull, 'is_subscription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_subscription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_subscription'] = $is_subscription;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets localized_description
     *
     * @return string|null
     */
    public function getLocalizedDescription()
    {
        return $this->container['localized_description'];
    }

    /**
     * Sets localized_description
     *
     * @param string|null $localized_description localized_description
     *
     * @return self
     */
    public function setLocalizedDescription($localized_description)
    {
        if (is_null($localized_description)) {
            array_push($this->openAPINullablesSetToNull, 'localized_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_description'] = $localized_description;

        return $this;
    }

    /**
     * Gets localized_memo
     *
     * @return string|null
     */
    public function getLocalizedMemo()
    {
        return $this->container['localized_memo'];
    }

    /**
     * Sets localized_memo
     *
     * @param string|null $localized_memo localized_memo
     *
     * @return self
     */
    public function setLocalizedMemo($localized_memo)
    {
        if (is_null($localized_memo)) {
            array_push($this->openAPINullablesSetToNull, 'localized_memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_memo'] = $localized_memo;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets member_guid
     *
     * @return string|null
     */
    public function getMemberGuid()
    {
        return $this->container['member_guid'];
    }

    /**
     * Sets member_guid
     *
     * @param string|null $member_guid member_guid
     *
     * @return self
     */
    public function setMemberGuid($member_guid)
    {
        if (is_null($member_guid)) {
            array_push($this->openAPINullablesSetToNull, 'member_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_guid'] = $member_guid;

        return $this;
    }

    /**
     * Gets member_is_managed_by_user
     *
     * @return bool|null
     */
    public function getMemberIsManagedByUser()
    {
        return $this->container['member_is_managed_by_user'];
    }

    /**
     * Sets member_is_managed_by_user
     *
     * @param bool|null $member_is_managed_by_user member_is_managed_by_user
     *
     * @return self
     */
    public function setMemberIsManagedByUser($member_is_managed_by_user)
    {
        if (is_null($member_is_managed_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'member_is_managed_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_is_managed_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_is_managed_by_user'] = $member_is_managed_by_user;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            array_push($this->openAPINullablesSetToNull, 'memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return int|null
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param int|null $merchant_category_code merchant_category_code
     *
     * @return self
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        if (is_null($merchant_category_code)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_category_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_category_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets merchant_guid
     *
     * @return string|null
     */
    public function getMerchantGuid()
    {
        return $this->container['merchant_guid'];
    }

    /**
     * Sets merchant_guid
     *
     * @param string|null $merchant_guid merchant_guid
     *
     * @return self
     */
    public function setMerchantGuid($merchant_guid)
    {
        if (is_null($merchant_guid)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_guid'] = $merchant_guid;

        return $this;
    }

    /**
     * Gets merchant_location_guid
     *
     * @return string|null
     */
    public function getMerchantLocationGuid()
    {
        return $this->container['merchant_location_guid'];
    }

    /**
     * Sets merchant_location_guid
     *
     * @param string|null $merchant_location_guid merchant_location_guid
     *
     * @return self
     */
    public function setMerchantLocationGuid($merchant_location_guid)
    {
        if (is_null($merchant_location_guid)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_location_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_location_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_location_guid'] = $merchant_location_guid;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets original_description
     *
     * @return string|null
     */
    public function getOriginalDescription()
    {
        return $this->container['original_description'];
    }

    /**
     * Sets original_description
     *
     * @param string|null $original_description original_description
     *
     * @return self
     */
    public function setOriginalDescription($original_description)
    {
        if (is_null($original_description)) {
            array_push($this->openAPINullablesSetToNull, 'original_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_description'] = $original_description;

        return $this;
    }

    /**
     * Gets posted_at
     *
     * @return string|null
     */
    public function getPostedAt()
    {
        return $this->container['posted_at'];
    }

    /**
     * Sets posted_at
     *
     * @param string|null $posted_at posted_at
     *
     * @return self
     */
    public function setPostedAt($posted_at)
    {
        if (is_null($posted_at)) {
            array_push($this->openAPINullablesSetToNull, 'posted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('posted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['posted_at'] = $posted_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets top_level_category
     *
     * @return string|null
     */
    public function getTopLevelCategory()
    {
        return $this->container['top_level_category'];
    }

    /**
     * Sets top_level_category
     *
     * @param string|null $top_level_category top_level_category
     *
     * @return self
     */
    public function setTopLevelCategory($top_level_category)
    {
        if (is_null($top_level_category)) {
            array_push($this->openAPINullablesSetToNull, 'top_level_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_level_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_level_category'] = $top_level_category;

        return $this;
    }

    /**
     * Gets transacted_at
     *
     * @return string|null
     */
    public function getTransactedAt()
    {
        return $this->container['transacted_at'];
    }

    /**
     * Sets transacted_at
     *
     * @param string|null $transacted_at transacted_at
     *
     * @return self
     */
    public function setTransactedAt($transacted_at)
    {
        if (is_null($transacted_at)) {
            array_push($this->openAPINullablesSetToNull, 'transacted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transacted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transacted_at'] = $transacted_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_guid
     *
     * @return string|null
     */
    public function getUserGuid()
    {
        return $this->container['user_guid'];
    }

    /**
     * Sets user_guid
     *
     * @param string|null $user_guid user_guid
     *
     * @return self
     */
    public function setUserGuid($user_guid)
    {
        if (is_null($user_guid)) {
            array_push($this->openAPINullablesSetToNull, 'user_guid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_guid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_guid'] = $user_guid;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


