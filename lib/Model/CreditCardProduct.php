<?php
/**
 * CreditCardProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreditCardProduct Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditCardProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'annual_fee' => 'float',
        'duration_of_introductory_rate_on_balance_transfer' => 'int',
        'duration_of_introductory_rate_on_purchases' => 'int',
        'guid' => 'string',
        'has_cashback_rewards' => 'bool',
        'has_other_rewards' => 'bool',
        'has_travel_rewards' => 'bool',
        'has_zero_introductory_annual_fee' => 'bool',
        'has_zero_percent_introductory_rate' => 'bool',
        'has_zero_percent_introductory_rate_on_balance_transfer' => 'bool',
        'is_accepting_applicants' => 'bool',
        'is_active_credit_card_product' => 'bool',
        'is_small_business_card' => 'bool',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'annual_fee' => null,
        'duration_of_introductory_rate_on_balance_transfer' => null,
        'duration_of_introductory_rate_on_purchases' => null,
        'guid' => null,
        'has_cashback_rewards' => null,
        'has_other_rewards' => null,
        'has_travel_rewards' => null,
        'has_zero_introductory_annual_fee' => null,
        'has_zero_percent_introductory_rate' => null,
        'has_zero_percent_introductory_rate_on_balance_transfer' => null,
        'is_accepting_applicants' => null,
        'is_active_credit_card_product' => null,
        'is_small_business_card' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'annual_fee' => false,
        'duration_of_introductory_rate_on_balance_transfer' => false,
        'duration_of_introductory_rate_on_purchases' => false,
        'guid' => false,
        'has_cashback_rewards' => false,
        'has_other_rewards' => false,
        'has_travel_rewards' => false,
        'has_zero_introductory_annual_fee' => false,
        'has_zero_percent_introductory_rate' => false,
        'has_zero_percent_introductory_rate_on_balance_transfer' => false,
        'is_accepting_applicants' => false,
        'is_active_credit_card_product' => false,
        'is_small_business_card' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annual_fee' => 'annual_fee',
        'duration_of_introductory_rate_on_balance_transfer' => 'duration_of_introductory_rate_on_balance_transfer',
        'duration_of_introductory_rate_on_purchases' => 'duration_of_introductory_rate_on_purchases',
        'guid' => 'guid',
        'has_cashback_rewards' => 'has_cashback_rewards',
        'has_other_rewards' => 'has_other_rewards',
        'has_travel_rewards' => 'has_travel_rewards',
        'has_zero_introductory_annual_fee' => 'has_zero_introductory_annual_fee',
        'has_zero_percent_introductory_rate' => 'has_zero_percent_introductory_rate',
        'has_zero_percent_introductory_rate_on_balance_transfer' => 'has_zero_percent_introductory_rate_on_balance_transfer',
        'is_accepting_applicants' => 'is_accepting_applicants',
        'is_active_credit_card_product' => 'is_active_credit_card_product',
        'is_small_business_card' => 'is_small_business_card',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annual_fee' => 'setAnnualFee',
        'duration_of_introductory_rate_on_balance_transfer' => 'setDurationOfIntroductoryRateOnBalanceTransfer',
        'duration_of_introductory_rate_on_purchases' => 'setDurationOfIntroductoryRateOnPurchases',
        'guid' => 'setGuid',
        'has_cashback_rewards' => 'setHasCashbackRewards',
        'has_other_rewards' => 'setHasOtherRewards',
        'has_travel_rewards' => 'setHasTravelRewards',
        'has_zero_introductory_annual_fee' => 'setHasZeroIntroductoryAnnualFee',
        'has_zero_percent_introductory_rate' => 'setHasZeroPercentIntroductoryRate',
        'has_zero_percent_introductory_rate_on_balance_transfer' => 'setHasZeroPercentIntroductoryRateOnBalanceTransfer',
        'is_accepting_applicants' => 'setIsAcceptingApplicants',
        'is_active_credit_card_product' => 'setIsActiveCreditCardProduct',
        'is_small_business_card' => 'setIsSmallBusinessCard',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annual_fee' => 'getAnnualFee',
        'duration_of_introductory_rate_on_balance_transfer' => 'getDurationOfIntroductoryRateOnBalanceTransfer',
        'duration_of_introductory_rate_on_purchases' => 'getDurationOfIntroductoryRateOnPurchases',
        'guid' => 'getGuid',
        'has_cashback_rewards' => 'getHasCashbackRewards',
        'has_other_rewards' => 'getHasOtherRewards',
        'has_travel_rewards' => 'getHasTravelRewards',
        'has_zero_introductory_annual_fee' => 'getHasZeroIntroductoryAnnualFee',
        'has_zero_percent_introductory_rate' => 'getHasZeroPercentIntroductoryRate',
        'has_zero_percent_introductory_rate_on_balance_transfer' => 'getHasZeroPercentIntroductoryRateOnBalanceTransfer',
        'is_accepting_applicants' => 'getIsAcceptingApplicants',
        'is_active_credit_card_product' => 'getIsActiveCreditCardProduct',
        'is_small_business_card' => 'getIsSmallBusinessCard',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('annual_fee', $data ?? [], null);
        $this->setIfExists('duration_of_introductory_rate_on_balance_transfer', $data ?? [], null);
        $this->setIfExists('duration_of_introductory_rate_on_purchases', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('has_cashback_rewards', $data ?? [], null);
        $this->setIfExists('has_other_rewards', $data ?? [], null);
        $this->setIfExists('has_travel_rewards', $data ?? [], null);
        $this->setIfExists('has_zero_introductory_annual_fee', $data ?? [], null);
        $this->setIfExists('has_zero_percent_introductory_rate', $data ?? [], null);
        $this->setIfExists('has_zero_percent_introductory_rate_on_balance_transfer', $data ?? [], null);
        $this->setIfExists('is_accepting_applicants', $data ?? [], null);
        $this->setIfExists('is_active_credit_card_product', $data ?? [], null);
        $this->setIfExists('is_small_business_card', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annual_fee
     *
     * @return float|null
     */
    public function getAnnualFee()
    {
        return $this->container['annual_fee'];
    }

    /**
     * Sets annual_fee
     *
     * @param float|null $annual_fee annual_fee
     *
     * @return self
     */
    public function setAnnualFee($annual_fee)
    {
        if (is_null($annual_fee)) {
            throw new \InvalidArgumentException('non-nullable annual_fee cannot be null');
        }
        $this->container['annual_fee'] = $annual_fee;

        return $this;
    }

    /**
     * Gets duration_of_introductory_rate_on_balance_transfer
     *
     * @return int|null
     */
    public function getDurationOfIntroductoryRateOnBalanceTransfer()
    {
        return $this->container['duration_of_introductory_rate_on_balance_transfer'];
    }

    /**
     * Sets duration_of_introductory_rate_on_balance_transfer
     *
     * @param int|null $duration_of_introductory_rate_on_balance_transfer duration_of_introductory_rate_on_balance_transfer
     *
     * @return self
     */
    public function setDurationOfIntroductoryRateOnBalanceTransfer($duration_of_introductory_rate_on_balance_transfer)
    {
        if (is_null($duration_of_introductory_rate_on_balance_transfer)) {
            throw new \InvalidArgumentException('non-nullable duration_of_introductory_rate_on_balance_transfer cannot be null');
        }
        $this->container['duration_of_introductory_rate_on_balance_transfer'] = $duration_of_introductory_rate_on_balance_transfer;

        return $this;
    }

    /**
     * Gets duration_of_introductory_rate_on_purchases
     *
     * @return int|null
     */
    public function getDurationOfIntroductoryRateOnPurchases()
    {
        return $this->container['duration_of_introductory_rate_on_purchases'];
    }

    /**
     * Sets duration_of_introductory_rate_on_purchases
     *
     * @param int|null $duration_of_introductory_rate_on_purchases duration_of_introductory_rate_on_purchases
     *
     * @return self
     */
    public function setDurationOfIntroductoryRateOnPurchases($duration_of_introductory_rate_on_purchases)
    {
        if (is_null($duration_of_introductory_rate_on_purchases)) {
            throw new \InvalidArgumentException('non-nullable duration_of_introductory_rate_on_purchases cannot be null');
        }
        $this->container['duration_of_introductory_rate_on_purchases'] = $duration_of_introductory_rate_on_purchases;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets has_cashback_rewards
     *
     * @return bool|null
     */
    public function getHasCashbackRewards()
    {
        return $this->container['has_cashback_rewards'];
    }

    /**
     * Sets has_cashback_rewards
     *
     * @param bool|null $has_cashback_rewards has_cashback_rewards
     *
     * @return self
     */
    public function setHasCashbackRewards($has_cashback_rewards)
    {
        if (is_null($has_cashback_rewards)) {
            throw new \InvalidArgumentException('non-nullable has_cashback_rewards cannot be null');
        }
        $this->container['has_cashback_rewards'] = $has_cashback_rewards;

        return $this;
    }

    /**
     * Gets has_other_rewards
     *
     * @return bool|null
     */
    public function getHasOtherRewards()
    {
        return $this->container['has_other_rewards'];
    }

    /**
     * Sets has_other_rewards
     *
     * @param bool|null $has_other_rewards has_other_rewards
     *
     * @return self
     */
    public function setHasOtherRewards($has_other_rewards)
    {
        if (is_null($has_other_rewards)) {
            throw new \InvalidArgumentException('non-nullable has_other_rewards cannot be null');
        }
        $this->container['has_other_rewards'] = $has_other_rewards;

        return $this;
    }

    /**
     * Gets has_travel_rewards
     *
     * @return bool|null
     */
    public function getHasTravelRewards()
    {
        return $this->container['has_travel_rewards'];
    }

    /**
     * Sets has_travel_rewards
     *
     * @param bool|null $has_travel_rewards has_travel_rewards
     *
     * @return self
     */
    public function setHasTravelRewards($has_travel_rewards)
    {
        if (is_null($has_travel_rewards)) {
            throw new \InvalidArgumentException('non-nullable has_travel_rewards cannot be null');
        }
        $this->container['has_travel_rewards'] = $has_travel_rewards;

        return $this;
    }

    /**
     * Gets has_zero_introductory_annual_fee
     *
     * @return bool|null
     */
    public function getHasZeroIntroductoryAnnualFee()
    {
        return $this->container['has_zero_introductory_annual_fee'];
    }

    /**
     * Sets has_zero_introductory_annual_fee
     *
     * @param bool|null $has_zero_introductory_annual_fee has_zero_introductory_annual_fee
     *
     * @return self
     */
    public function setHasZeroIntroductoryAnnualFee($has_zero_introductory_annual_fee)
    {
        if (is_null($has_zero_introductory_annual_fee)) {
            throw new \InvalidArgumentException('non-nullable has_zero_introductory_annual_fee cannot be null');
        }
        $this->container['has_zero_introductory_annual_fee'] = $has_zero_introductory_annual_fee;

        return $this;
    }

    /**
     * Gets has_zero_percent_introductory_rate
     *
     * @return bool|null
     */
    public function getHasZeroPercentIntroductoryRate()
    {
        return $this->container['has_zero_percent_introductory_rate'];
    }

    /**
     * Sets has_zero_percent_introductory_rate
     *
     * @param bool|null $has_zero_percent_introductory_rate has_zero_percent_introductory_rate
     *
     * @return self
     */
    public function setHasZeroPercentIntroductoryRate($has_zero_percent_introductory_rate)
    {
        if (is_null($has_zero_percent_introductory_rate)) {
            throw new \InvalidArgumentException('non-nullable has_zero_percent_introductory_rate cannot be null');
        }
        $this->container['has_zero_percent_introductory_rate'] = $has_zero_percent_introductory_rate;

        return $this;
    }

    /**
     * Gets has_zero_percent_introductory_rate_on_balance_transfer
     *
     * @return bool|null
     */
    public function getHasZeroPercentIntroductoryRateOnBalanceTransfer()
    {
        return $this->container['has_zero_percent_introductory_rate_on_balance_transfer'];
    }

    /**
     * Sets has_zero_percent_introductory_rate_on_balance_transfer
     *
     * @param bool|null $has_zero_percent_introductory_rate_on_balance_transfer has_zero_percent_introductory_rate_on_balance_transfer
     *
     * @return self
     */
    public function setHasZeroPercentIntroductoryRateOnBalanceTransfer($has_zero_percent_introductory_rate_on_balance_transfer)
    {
        if (is_null($has_zero_percent_introductory_rate_on_balance_transfer)) {
            throw new \InvalidArgumentException('non-nullable has_zero_percent_introductory_rate_on_balance_transfer cannot be null');
        }
        $this->container['has_zero_percent_introductory_rate_on_balance_transfer'] = $has_zero_percent_introductory_rate_on_balance_transfer;

        return $this;
    }

    /**
     * Gets is_accepting_applicants
     *
     * @return bool|null
     */
    public function getIsAcceptingApplicants()
    {
        return $this->container['is_accepting_applicants'];
    }

    /**
     * Sets is_accepting_applicants
     *
     * @param bool|null $is_accepting_applicants is_accepting_applicants
     *
     * @return self
     */
    public function setIsAcceptingApplicants($is_accepting_applicants)
    {
        if (is_null($is_accepting_applicants)) {
            throw new \InvalidArgumentException('non-nullable is_accepting_applicants cannot be null');
        }
        $this->container['is_accepting_applicants'] = $is_accepting_applicants;

        return $this;
    }

    /**
     * Gets is_active_credit_card_product
     *
     * @return bool|null
     */
    public function getIsActiveCreditCardProduct()
    {
        return $this->container['is_active_credit_card_product'];
    }

    /**
     * Sets is_active_credit_card_product
     *
     * @param bool|null $is_active_credit_card_product is_active_credit_card_product
     *
     * @return self
     */
    public function setIsActiveCreditCardProduct($is_active_credit_card_product)
    {
        if (is_null($is_active_credit_card_product)) {
            throw new \InvalidArgumentException('non-nullable is_active_credit_card_product cannot be null');
        }
        $this->container['is_active_credit_card_product'] = $is_active_credit_card_product;

        return $this;
    }

    /**
     * Gets is_small_business_card
     *
     * @return bool|null
     */
    public function getIsSmallBusinessCard()
    {
        return $this->container['is_small_business_card'];
    }

    /**
     * Sets is_small_business_card
     *
     * @param bool|null $is_small_business_card is_small_business_card
     *
     * @return self
     */
    public function setIsSmallBusinessCard($is_small_business_card)
    {
        if (is_null($is_small_business_card)) {
            throw new \InvalidArgumentException('non-nullable is_small_business_card cannot be null');
        }
        $this->container['is_small_business_card'] = $is_small_business_card;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


